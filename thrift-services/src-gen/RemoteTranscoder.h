/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RemoteTranscoder_H
#define RemoteTranscoder_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "remotetranscoder_types.h"
#include "CommonService.h"

namespace remotetranscoder {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class RemoteTranscoderIf : virtual public  ::common::CommonServiceIf {
 public:
  virtual ~RemoteTranscoderIf() {}
  virtual void Probe(std::string& _return, const ProbeType& input) = 0;
  virtual bool StreamUrl(const StreamUrlType& input) = 0;
  virtual bool Pause(const PauseType& input) = 0;
  virtual bool SeekTo(const SeekToType& input) = 0;
  virtual bool Resume(const ResumeType& input) = 0;
  virtual bool Stop(const StopType& input) = 0;
  virtual void AudioInfo(std::string& _return, const AudioInfoType& input) = 0;
  virtual void GetVideo(std::string& _return, const VideoType& input) = 0;
};

class RemoteTranscoderIfFactory : virtual public  ::common::CommonServiceIfFactory {
 public:
  typedef RemoteTranscoderIf Handler;

  virtual ~RemoteTranscoderIfFactory() {}

  virtual RemoteTranscoderIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) override = 0;
  virtual void releaseHandler( ::common::CommonServiceIf* /* handler */) override = 0;
  };

class RemoteTranscoderIfSingletonFactory : virtual public RemoteTranscoderIfFactory {
 public:
  RemoteTranscoderIfSingletonFactory(const ::std::shared_ptr<RemoteTranscoderIf>& iface) : iface_(iface) {}
  virtual ~RemoteTranscoderIfSingletonFactory() {}

  virtual RemoteTranscoderIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler( ::common::CommonServiceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<RemoteTranscoderIf> iface_;
};

class RemoteTranscoderNull : virtual public RemoteTranscoderIf , virtual public  ::common::CommonServiceNull {
 public:
  virtual ~RemoteTranscoderNull() {}
  void Probe(std::string& /* _return */, const ProbeType& /* input */) override {
    return;
  }
  bool StreamUrl(const StreamUrlType& /* input */) override {
    bool _return = false;
    return _return;
  }
  bool Pause(const PauseType& /* input */) override {
    bool _return = false;
    return _return;
  }
  bool SeekTo(const SeekToType& /* input */) override {
    bool _return = false;
    return _return;
  }
  bool Resume(const ResumeType& /* input */) override {
    bool _return = false;
    return _return;
  }
  bool Stop(const StopType& /* input */) override {
    bool _return = false;
    return _return;
  }
  void AudioInfo(std::string& /* _return */, const AudioInfoType& /* input */) override {
    return;
  }
  void GetVideo(std::string& /* _return */, const VideoType& /* input */) override {
    return;
  }
};

typedef struct _RemoteTranscoder_Probe_args__isset {
  _RemoteTranscoder_Probe_args__isset() : input(false) {}
  bool input :1;
} _RemoteTranscoder_Probe_args__isset;

class RemoteTranscoder_Probe_args {
 public:

  RemoteTranscoder_Probe_args(const RemoteTranscoder_Probe_args&);
  RemoteTranscoder_Probe_args& operator=(const RemoteTranscoder_Probe_args&);
  RemoteTranscoder_Probe_args() noexcept;

  virtual ~RemoteTranscoder_Probe_args() noexcept;
  ProbeType input;

  _RemoteTranscoder_Probe_args__isset __isset;

  void __set_input(const ProbeType& val);

  bool operator == (const RemoteTranscoder_Probe_args & rhs) const;
  bool operator != (const RemoteTranscoder_Probe_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteTranscoder_Probe_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteTranscoder_Probe_pargs {
 public:


  virtual ~RemoteTranscoder_Probe_pargs() noexcept;
  const ProbeType* input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteTranscoder_Probe_result__isset {
  _RemoteTranscoder_Probe_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _RemoteTranscoder_Probe_result__isset;

class RemoteTranscoder_Probe_result {
 public:

  RemoteTranscoder_Probe_result(const RemoteTranscoder_Probe_result&);
  RemoteTranscoder_Probe_result& operator=(const RemoteTranscoder_Probe_result&);
  RemoteTranscoder_Probe_result() noexcept;

  virtual ~RemoteTranscoder_Probe_result() noexcept;
  std::string success;
   ::common::OperationFailed err;

  _RemoteTranscoder_Probe_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_err(const  ::common::OperationFailed& val);

  bool operator == (const RemoteTranscoder_Probe_result & rhs) const;
  bool operator != (const RemoteTranscoder_Probe_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteTranscoder_Probe_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteTranscoder_Probe_presult__isset {
  _RemoteTranscoder_Probe_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _RemoteTranscoder_Probe_presult__isset;

class RemoteTranscoder_Probe_presult {
 public:


  virtual ~RemoteTranscoder_Probe_presult() noexcept;
  std::string* success;
   ::common::OperationFailed err;

  _RemoteTranscoder_Probe_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteTranscoder_StreamUrl_args__isset {
  _RemoteTranscoder_StreamUrl_args__isset() : input(false) {}
  bool input :1;
} _RemoteTranscoder_StreamUrl_args__isset;

class RemoteTranscoder_StreamUrl_args {
 public:

  RemoteTranscoder_StreamUrl_args(const RemoteTranscoder_StreamUrl_args&);
  RemoteTranscoder_StreamUrl_args& operator=(const RemoteTranscoder_StreamUrl_args&);
  RemoteTranscoder_StreamUrl_args() noexcept;

  virtual ~RemoteTranscoder_StreamUrl_args() noexcept;
  StreamUrlType input;

  _RemoteTranscoder_StreamUrl_args__isset __isset;

  void __set_input(const StreamUrlType& val);

  bool operator == (const RemoteTranscoder_StreamUrl_args & rhs) const;
  bool operator != (const RemoteTranscoder_StreamUrl_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteTranscoder_StreamUrl_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteTranscoder_StreamUrl_pargs {
 public:


  virtual ~RemoteTranscoder_StreamUrl_pargs() noexcept;
  const StreamUrlType* input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteTranscoder_StreamUrl_result__isset {
  _RemoteTranscoder_StreamUrl_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _RemoteTranscoder_StreamUrl_result__isset;

class RemoteTranscoder_StreamUrl_result {
 public:

  RemoteTranscoder_StreamUrl_result(const RemoteTranscoder_StreamUrl_result&);
  RemoteTranscoder_StreamUrl_result& operator=(const RemoteTranscoder_StreamUrl_result&);
  RemoteTranscoder_StreamUrl_result() noexcept;

  virtual ~RemoteTranscoder_StreamUrl_result() noexcept;
  bool success;
   ::common::OperationFailed err;

  _RemoteTranscoder_StreamUrl_result__isset __isset;

  void __set_success(const bool val);

  void __set_err(const  ::common::OperationFailed& val);

  bool operator == (const RemoteTranscoder_StreamUrl_result & rhs) const;
  bool operator != (const RemoteTranscoder_StreamUrl_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteTranscoder_StreamUrl_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteTranscoder_StreamUrl_presult__isset {
  _RemoteTranscoder_StreamUrl_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _RemoteTranscoder_StreamUrl_presult__isset;

class RemoteTranscoder_StreamUrl_presult {
 public:


  virtual ~RemoteTranscoder_StreamUrl_presult() noexcept;
  bool* success;
   ::common::OperationFailed err;

  _RemoteTranscoder_StreamUrl_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteTranscoder_Pause_args__isset {
  _RemoteTranscoder_Pause_args__isset() : input(false) {}
  bool input :1;
} _RemoteTranscoder_Pause_args__isset;

class RemoteTranscoder_Pause_args {
 public:

  RemoteTranscoder_Pause_args(const RemoteTranscoder_Pause_args&);
  RemoteTranscoder_Pause_args& operator=(const RemoteTranscoder_Pause_args&);
  RemoteTranscoder_Pause_args() noexcept;

  virtual ~RemoteTranscoder_Pause_args() noexcept;
  PauseType input;

  _RemoteTranscoder_Pause_args__isset __isset;

  void __set_input(const PauseType& val);

  bool operator == (const RemoteTranscoder_Pause_args & rhs) const;
  bool operator != (const RemoteTranscoder_Pause_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteTranscoder_Pause_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteTranscoder_Pause_pargs {
 public:


  virtual ~RemoteTranscoder_Pause_pargs() noexcept;
  const PauseType* input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteTranscoder_Pause_result__isset {
  _RemoteTranscoder_Pause_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _RemoteTranscoder_Pause_result__isset;

class RemoteTranscoder_Pause_result {
 public:

  RemoteTranscoder_Pause_result(const RemoteTranscoder_Pause_result&);
  RemoteTranscoder_Pause_result& operator=(const RemoteTranscoder_Pause_result&);
  RemoteTranscoder_Pause_result() noexcept;

  virtual ~RemoteTranscoder_Pause_result() noexcept;
  bool success;
   ::common::OperationFailed err;

  _RemoteTranscoder_Pause_result__isset __isset;

  void __set_success(const bool val);

  void __set_err(const  ::common::OperationFailed& val);

  bool operator == (const RemoteTranscoder_Pause_result & rhs) const;
  bool operator != (const RemoteTranscoder_Pause_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteTranscoder_Pause_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteTranscoder_Pause_presult__isset {
  _RemoteTranscoder_Pause_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _RemoteTranscoder_Pause_presult__isset;

class RemoteTranscoder_Pause_presult {
 public:


  virtual ~RemoteTranscoder_Pause_presult() noexcept;
  bool* success;
   ::common::OperationFailed err;

  _RemoteTranscoder_Pause_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteTranscoder_SeekTo_args__isset {
  _RemoteTranscoder_SeekTo_args__isset() : input(false) {}
  bool input :1;
} _RemoteTranscoder_SeekTo_args__isset;

class RemoteTranscoder_SeekTo_args {
 public:

  RemoteTranscoder_SeekTo_args(const RemoteTranscoder_SeekTo_args&);
  RemoteTranscoder_SeekTo_args& operator=(const RemoteTranscoder_SeekTo_args&);
  RemoteTranscoder_SeekTo_args() noexcept;

  virtual ~RemoteTranscoder_SeekTo_args() noexcept;
  SeekToType input;

  _RemoteTranscoder_SeekTo_args__isset __isset;

  void __set_input(const SeekToType& val);

  bool operator == (const RemoteTranscoder_SeekTo_args & rhs) const;
  bool operator != (const RemoteTranscoder_SeekTo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteTranscoder_SeekTo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteTranscoder_SeekTo_pargs {
 public:


  virtual ~RemoteTranscoder_SeekTo_pargs() noexcept;
  const SeekToType* input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteTranscoder_SeekTo_result__isset {
  _RemoteTranscoder_SeekTo_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _RemoteTranscoder_SeekTo_result__isset;

class RemoteTranscoder_SeekTo_result {
 public:

  RemoteTranscoder_SeekTo_result(const RemoteTranscoder_SeekTo_result&);
  RemoteTranscoder_SeekTo_result& operator=(const RemoteTranscoder_SeekTo_result&);
  RemoteTranscoder_SeekTo_result() noexcept;

  virtual ~RemoteTranscoder_SeekTo_result() noexcept;
  bool success;
   ::common::OperationFailed err;

  _RemoteTranscoder_SeekTo_result__isset __isset;

  void __set_success(const bool val);

  void __set_err(const  ::common::OperationFailed& val);

  bool operator == (const RemoteTranscoder_SeekTo_result & rhs) const;
  bool operator != (const RemoteTranscoder_SeekTo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteTranscoder_SeekTo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteTranscoder_SeekTo_presult__isset {
  _RemoteTranscoder_SeekTo_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _RemoteTranscoder_SeekTo_presult__isset;

class RemoteTranscoder_SeekTo_presult {
 public:


  virtual ~RemoteTranscoder_SeekTo_presult() noexcept;
  bool* success;
   ::common::OperationFailed err;

  _RemoteTranscoder_SeekTo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteTranscoder_Resume_args__isset {
  _RemoteTranscoder_Resume_args__isset() : input(false) {}
  bool input :1;
} _RemoteTranscoder_Resume_args__isset;

class RemoteTranscoder_Resume_args {
 public:

  RemoteTranscoder_Resume_args(const RemoteTranscoder_Resume_args&);
  RemoteTranscoder_Resume_args& operator=(const RemoteTranscoder_Resume_args&);
  RemoteTranscoder_Resume_args() noexcept;

  virtual ~RemoteTranscoder_Resume_args() noexcept;
  ResumeType input;

  _RemoteTranscoder_Resume_args__isset __isset;

  void __set_input(const ResumeType& val);

  bool operator == (const RemoteTranscoder_Resume_args & rhs) const;
  bool operator != (const RemoteTranscoder_Resume_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteTranscoder_Resume_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteTranscoder_Resume_pargs {
 public:


  virtual ~RemoteTranscoder_Resume_pargs() noexcept;
  const ResumeType* input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteTranscoder_Resume_result__isset {
  _RemoteTranscoder_Resume_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _RemoteTranscoder_Resume_result__isset;

class RemoteTranscoder_Resume_result {
 public:

  RemoteTranscoder_Resume_result(const RemoteTranscoder_Resume_result&);
  RemoteTranscoder_Resume_result& operator=(const RemoteTranscoder_Resume_result&);
  RemoteTranscoder_Resume_result() noexcept;

  virtual ~RemoteTranscoder_Resume_result() noexcept;
  bool success;
   ::common::OperationFailed err;

  _RemoteTranscoder_Resume_result__isset __isset;

  void __set_success(const bool val);

  void __set_err(const  ::common::OperationFailed& val);

  bool operator == (const RemoteTranscoder_Resume_result & rhs) const;
  bool operator != (const RemoteTranscoder_Resume_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteTranscoder_Resume_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteTranscoder_Resume_presult__isset {
  _RemoteTranscoder_Resume_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _RemoteTranscoder_Resume_presult__isset;

class RemoteTranscoder_Resume_presult {
 public:


  virtual ~RemoteTranscoder_Resume_presult() noexcept;
  bool* success;
   ::common::OperationFailed err;

  _RemoteTranscoder_Resume_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteTranscoder_Stop_args__isset {
  _RemoteTranscoder_Stop_args__isset() : input(false) {}
  bool input :1;
} _RemoteTranscoder_Stop_args__isset;

class RemoteTranscoder_Stop_args {
 public:

  RemoteTranscoder_Stop_args(const RemoteTranscoder_Stop_args&);
  RemoteTranscoder_Stop_args& operator=(const RemoteTranscoder_Stop_args&);
  RemoteTranscoder_Stop_args() noexcept;

  virtual ~RemoteTranscoder_Stop_args() noexcept;
  StopType input;

  _RemoteTranscoder_Stop_args__isset __isset;

  void __set_input(const StopType& val);

  bool operator == (const RemoteTranscoder_Stop_args & rhs) const;
  bool operator != (const RemoteTranscoder_Stop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteTranscoder_Stop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteTranscoder_Stop_pargs {
 public:


  virtual ~RemoteTranscoder_Stop_pargs() noexcept;
  const StopType* input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteTranscoder_Stop_result__isset {
  _RemoteTranscoder_Stop_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _RemoteTranscoder_Stop_result__isset;

class RemoteTranscoder_Stop_result {
 public:

  RemoteTranscoder_Stop_result(const RemoteTranscoder_Stop_result&);
  RemoteTranscoder_Stop_result& operator=(const RemoteTranscoder_Stop_result&);
  RemoteTranscoder_Stop_result() noexcept;

  virtual ~RemoteTranscoder_Stop_result() noexcept;
  bool success;
   ::common::OperationFailed err;

  _RemoteTranscoder_Stop_result__isset __isset;

  void __set_success(const bool val);

  void __set_err(const  ::common::OperationFailed& val);

  bool operator == (const RemoteTranscoder_Stop_result & rhs) const;
  bool operator != (const RemoteTranscoder_Stop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteTranscoder_Stop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteTranscoder_Stop_presult__isset {
  _RemoteTranscoder_Stop_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _RemoteTranscoder_Stop_presult__isset;

class RemoteTranscoder_Stop_presult {
 public:


  virtual ~RemoteTranscoder_Stop_presult() noexcept;
  bool* success;
   ::common::OperationFailed err;

  _RemoteTranscoder_Stop_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteTranscoder_AudioInfo_args__isset {
  _RemoteTranscoder_AudioInfo_args__isset() : input(false) {}
  bool input :1;
} _RemoteTranscoder_AudioInfo_args__isset;

class RemoteTranscoder_AudioInfo_args {
 public:

  RemoteTranscoder_AudioInfo_args(const RemoteTranscoder_AudioInfo_args&);
  RemoteTranscoder_AudioInfo_args& operator=(const RemoteTranscoder_AudioInfo_args&);
  RemoteTranscoder_AudioInfo_args() noexcept;

  virtual ~RemoteTranscoder_AudioInfo_args() noexcept;
  AudioInfoType input;

  _RemoteTranscoder_AudioInfo_args__isset __isset;

  void __set_input(const AudioInfoType& val);

  bool operator == (const RemoteTranscoder_AudioInfo_args & rhs) const;
  bool operator != (const RemoteTranscoder_AudioInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteTranscoder_AudioInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteTranscoder_AudioInfo_pargs {
 public:


  virtual ~RemoteTranscoder_AudioInfo_pargs() noexcept;
  const AudioInfoType* input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteTranscoder_AudioInfo_result__isset {
  _RemoteTranscoder_AudioInfo_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _RemoteTranscoder_AudioInfo_result__isset;

class RemoteTranscoder_AudioInfo_result {
 public:

  RemoteTranscoder_AudioInfo_result(const RemoteTranscoder_AudioInfo_result&);
  RemoteTranscoder_AudioInfo_result& operator=(const RemoteTranscoder_AudioInfo_result&);
  RemoteTranscoder_AudioInfo_result() noexcept;

  virtual ~RemoteTranscoder_AudioInfo_result() noexcept;
  std::string success;
   ::common::OperationFailed err;

  _RemoteTranscoder_AudioInfo_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_err(const  ::common::OperationFailed& val);

  bool operator == (const RemoteTranscoder_AudioInfo_result & rhs) const;
  bool operator != (const RemoteTranscoder_AudioInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteTranscoder_AudioInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteTranscoder_AudioInfo_presult__isset {
  _RemoteTranscoder_AudioInfo_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _RemoteTranscoder_AudioInfo_presult__isset;

class RemoteTranscoder_AudioInfo_presult {
 public:


  virtual ~RemoteTranscoder_AudioInfo_presult() noexcept;
  std::string* success;
   ::common::OperationFailed err;

  _RemoteTranscoder_AudioInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteTranscoder_GetVideo_args__isset {
  _RemoteTranscoder_GetVideo_args__isset() : input(false) {}
  bool input :1;
} _RemoteTranscoder_GetVideo_args__isset;

class RemoteTranscoder_GetVideo_args {
 public:

  RemoteTranscoder_GetVideo_args(const RemoteTranscoder_GetVideo_args&);
  RemoteTranscoder_GetVideo_args& operator=(const RemoteTranscoder_GetVideo_args&);
  RemoteTranscoder_GetVideo_args() noexcept;

  virtual ~RemoteTranscoder_GetVideo_args() noexcept;
  VideoType input;

  _RemoteTranscoder_GetVideo_args__isset __isset;

  void __set_input(const VideoType& val);

  bool operator == (const RemoteTranscoder_GetVideo_args & rhs) const;
  bool operator != (const RemoteTranscoder_GetVideo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteTranscoder_GetVideo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteTranscoder_GetVideo_pargs {
 public:


  virtual ~RemoteTranscoder_GetVideo_pargs() noexcept;
  const VideoType* input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteTranscoder_GetVideo_result__isset {
  _RemoteTranscoder_GetVideo_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _RemoteTranscoder_GetVideo_result__isset;

class RemoteTranscoder_GetVideo_result {
 public:

  RemoteTranscoder_GetVideo_result(const RemoteTranscoder_GetVideo_result&);
  RemoteTranscoder_GetVideo_result& operator=(const RemoteTranscoder_GetVideo_result&);
  RemoteTranscoder_GetVideo_result() noexcept;

  virtual ~RemoteTranscoder_GetVideo_result() noexcept;
  std::string success;
   ::common::OperationFailed err;

  _RemoteTranscoder_GetVideo_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_err(const  ::common::OperationFailed& val);

  bool operator == (const RemoteTranscoder_GetVideo_result & rhs) const;
  bool operator != (const RemoteTranscoder_GetVideo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteTranscoder_GetVideo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteTranscoder_GetVideo_presult__isset {
  _RemoteTranscoder_GetVideo_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _RemoteTranscoder_GetVideo_presult__isset;

class RemoteTranscoder_GetVideo_presult {
 public:


  virtual ~RemoteTranscoder_GetVideo_presult() noexcept;
  std::string* success;
   ::common::OperationFailed err;

  _RemoteTranscoder_GetVideo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RemoteTranscoderClient : virtual public RemoteTranscoderIf, public  ::common::CommonServiceClient {
 public:
  RemoteTranscoderClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::common::CommonServiceClient(prot, prot) {}
  RemoteTranscoderClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::common::CommonServiceClient(iprot, oprot) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Probe(std::string& _return, const ProbeType& input) override;
  void send_Probe(const ProbeType& input);
  void recv_Probe(std::string& _return);
  bool StreamUrl(const StreamUrlType& input) override;
  void send_StreamUrl(const StreamUrlType& input);
  bool recv_StreamUrl();
  bool Pause(const PauseType& input) override;
  void send_Pause(const PauseType& input);
  bool recv_Pause();
  bool SeekTo(const SeekToType& input) override;
  void send_SeekTo(const SeekToType& input);
  bool recv_SeekTo();
  bool Resume(const ResumeType& input) override;
  void send_Resume(const ResumeType& input);
  bool recv_Resume();
  bool Stop(const StopType& input) override;
  void send_Stop(const StopType& input);
  bool recv_Stop();
  void AudioInfo(std::string& _return, const AudioInfoType& input) override;
  void send_AudioInfo(const AudioInfoType& input);
  void recv_AudioInfo(std::string& _return);
  void GetVideo(std::string& _return, const VideoType& input) override;
  void send_GetVideo(const VideoType& input);
  void recv_GetVideo(std::string& _return);
};

class RemoteTranscoderProcessor : public  ::common::CommonServiceProcessor {
 protected:
  ::std::shared_ptr<RemoteTranscoderIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (RemoteTranscoderProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Probe(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_StreamUrl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Pause(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SeekTo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Resume(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Stop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AudioInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetVideo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RemoteTranscoderProcessor(::std::shared_ptr<RemoteTranscoderIf> iface) :
     ::common::CommonServiceProcessor(iface),
    iface_(iface) {
    processMap_["Probe"] = &RemoteTranscoderProcessor::process_Probe;
    processMap_["StreamUrl"] = &RemoteTranscoderProcessor::process_StreamUrl;
    processMap_["Pause"] = &RemoteTranscoderProcessor::process_Pause;
    processMap_["SeekTo"] = &RemoteTranscoderProcessor::process_SeekTo;
    processMap_["Resume"] = &RemoteTranscoderProcessor::process_Resume;
    processMap_["Stop"] = &RemoteTranscoderProcessor::process_Stop;
    processMap_["AudioInfo"] = &RemoteTranscoderProcessor::process_AudioInfo;
    processMap_["GetVideo"] = &RemoteTranscoderProcessor::process_GetVideo;
  }

  virtual ~RemoteTranscoderProcessor() {}
};

class RemoteTranscoderProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RemoteTranscoderProcessorFactory(const ::std::shared_ptr< RemoteTranscoderIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< RemoteTranscoderIfFactory > handlerFactory_;
};

class RemoteTranscoderMultiface : virtual public RemoteTranscoderIf, public  ::common::CommonServiceMultiface {
 public:
  RemoteTranscoderMultiface(std::vector<std::shared_ptr<RemoteTranscoderIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<std::shared_ptr<RemoteTranscoderIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::common::CommonServiceMultiface::add(*iter);
    }
  }
  virtual ~RemoteTranscoderMultiface() {}
 protected:
  std::vector<std::shared_ptr<RemoteTranscoderIf> > ifaces_;
  RemoteTranscoderMultiface() {}
  void add(::std::shared_ptr<RemoteTranscoderIf> iface) {
     ::common::CommonServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void Probe(std::string& _return, const ProbeType& input) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Probe(_return, input);
    }
    ifaces_[i]->Probe(_return, input);
    return;
  }

  bool StreamUrl(const StreamUrlType& input) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->StreamUrl(input);
    }
    return ifaces_[i]->StreamUrl(input);
  }

  bool Pause(const PauseType& input) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Pause(input);
    }
    return ifaces_[i]->Pause(input);
  }

  bool SeekTo(const SeekToType& input) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SeekTo(input);
    }
    return ifaces_[i]->SeekTo(input);
  }

  bool Resume(const ResumeType& input) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Resume(input);
    }
    return ifaces_[i]->Resume(input);
  }

  bool Stop(const StopType& input) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Stop(input);
    }
    return ifaces_[i]->Stop(input);
  }

  void AudioInfo(std::string& _return, const AudioInfoType& input) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AudioInfo(_return, input);
    }
    ifaces_[i]->AudioInfo(_return, input);
    return;
  }

  void GetVideo(std::string& _return, const VideoType& input) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetVideo(_return, input);
    }
    ifaces_[i]->GetVideo(_return, input);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class RemoteTranscoderConcurrentClient : virtual public RemoteTranscoderIf, public  ::common::CommonServiceConcurrentClient {
 public:
  RemoteTranscoderConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) :
     ::common::CommonServiceConcurrentClient(prot, prot, sync) {}
  RemoteTranscoderConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) :     ::common::CommonServiceConcurrentClient(iprot, oprot, sync) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Probe(std::string& _return, const ProbeType& input) override;
  int32_t send_Probe(const ProbeType& input);
  void recv_Probe(std::string& _return, const int32_t seqid);
  bool StreamUrl(const StreamUrlType& input) override;
  int32_t send_StreamUrl(const StreamUrlType& input);
  bool recv_StreamUrl(const int32_t seqid);
  bool Pause(const PauseType& input) override;
  int32_t send_Pause(const PauseType& input);
  bool recv_Pause(const int32_t seqid);
  bool SeekTo(const SeekToType& input) override;
  int32_t send_SeekTo(const SeekToType& input);
  bool recv_SeekTo(const int32_t seqid);
  bool Resume(const ResumeType& input) override;
  int32_t send_Resume(const ResumeType& input);
  bool recv_Resume(const int32_t seqid);
  bool Stop(const StopType& input) override;
  int32_t send_Stop(const StopType& input);
  bool recv_Stop(const int32_t seqid);
  void AudioInfo(std::string& _return, const AudioInfoType& input) override;
  int32_t send_AudioInfo(const AudioInfoType& input);
  void recv_AudioInfo(std::string& _return, const int32_t seqid);
  void GetVideo(std::string& _return, const VideoType& input) override;
  int32_t send_GetVideo(const VideoType& input);
  void recv_GetVideo(std::string& _return, const int32_t seqid);
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
