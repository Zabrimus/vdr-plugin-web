// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "CefBrowser.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::cefbrowser;

class CefBrowserHandler : virtual public CefBrowserIf {
 public:
  CefBrowserHandler() {
    // Your initialization goes here
  }

  bool LoadUrl(const LoadUrlType& input) {
    // Your implementation goes here
    printf("LoadUrl\n");
  }

  bool RedButton(const RedButtonType& input) {
    // Your implementation goes here
    printf("RedButton\n");
  }

  bool ReloadOSD() {
    // Your implementation goes here
    printf("ReloadOSD\n");
  }

  bool StartApplication(const StartApplicationType& input) {
    // Your implementation goes here
    printf("StartApplication\n");
  }

  bool ProcessKey(const ProcessKeyType& input) {
    // Your implementation goes here
    printf("ProcessKey\n");
  }

  bool StreamError(const StreamErrorType& input) {
    // Your implementation goes here
    printf("StreamError\n");
  }

  bool InsertHbbtv(const InsertHbbtvType& input) {
    // Your implementation goes here
    printf("InsertHbbtv\n");
  }

  bool InsertChannel(const InsertChannelType& input) {
    // Your implementation goes here
    printf("InsertChannel\n");
  }

  bool StopVideo(const StopVideoType& input) {
    // Your implementation goes here
    printf("StopVideo\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<CefBrowserHandler> handler(new CefBrowserHandler());
  ::std::shared_ptr<TProcessor> processor(new CefBrowserProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

