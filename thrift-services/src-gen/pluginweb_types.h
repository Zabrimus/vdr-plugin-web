/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef pluginweb_TYPES_H
#define pluginweb_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "common_types.h"


namespace pluginweb {

class ProcessOsdUpdateType;

class ProcessOsdUpdateQOIType;

class ProcessTSPacketType;

class StartVideoType;

class VideoSizeType;

class ResetVideoType;

class SelectAudioTrackType;

typedef struct _ProcessOsdUpdateType__isset {
  _ProcessOsdUpdateType__isset() : disp_width(false), disp_height(false), x(false), y(false), width(false), height(false) {}
  bool disp_width :1;
  bool disp_height :1;
  bool x :1;
  bool y :1;
  bool width :1;
  bool height :1;
} _ProcessOsdUpdateType__isset;

class ProcessOsdUpdateType : public virtual ::apache::thrift::TBase {
 public:

  ProcessOsdUpdateType(const ProcessOsdUpdateType&) noexcept;
  ProcessOsdUpdateType& operator=(const ProcessOsdUpdateType&) noexcept;
  ProcessOsdUpdateType() noexcept;

  virtual ~ProcessOsdUpdateType() noexcept;
  int32_t disp_width;
  int32_t disp_height;
  int32_t x;
  int32_t y;
  int32_t width;
  int32_t height;

  _ProcessOsdUpdateType__isset __isset;

  void __set_disp_width(const int32_t val);

  void __set_disp_height(const int32_t val);

  void __set_x(const int32_t val);

  void __set_y(const int32_t val);

  void __set_width(const int32_t val);

  void __set_height(const int32_t val);

  bool operator == (const ProcessOsdUpdateType & rhs) const;
  bool operator != (const ProcessOsdUpdateType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessOsdUpdateType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ProcessOsdUpdateType &a, ProcessOsdUpdateType &b);

std::ostream& operator<<(std::ostream& out, const ProcessOsdUpdateType& obj);

typedef struct _ProcessOsdUpdateQOIType__isset {
  _ProcessOsdUpdateQOIType__isset() : render_width(false), render_height(false), x(false), y(false), image_data(false) {}
  bool render_width :1;
  bool render_height :1;
  bool x :1;
  bool y :1;
  bool image_data :1;
} _ProcessOsdUpdateQOIType__isset;

class ProcessOsdUpdateQOIType : public virtual ::apache::thrift::TBase {
 public:

  ProcessOsdUpdateQOIType(const ProcessOsdUpdateQOIType&);
  ProcessOsdUpdateQOIType& operator=(const ProcessOsdUpdateQOIType&);
  ProcessOsdUpdateQOIType() noexcept;

  virtual ~ProcessOsdUpdateQOIType() noexcept;
  int32_t render_width;
  int32_t render_height;
  int32_t x;
  int32_t y;
  std::string image_data;

  _ProcessOsdUpdateQOIType__isset __isset;

  void __set_render_width(const int32_t val);

  void __set_render_height(const int32_t val);

  void __set_x(const int32_t val);

  void __set_y(const int32_t val);

  void __set_image_data(const std::string& val);

  bool operator == (const ProcessOsdUpdateQOIType & rhs) const;
  bool operator != (const ProcessOsdUpdateQOIType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessOsdUpdateQOIType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ProcessOsdUpdateQOIType &a, ProcessOsdUpdateQOIType &b);

std::ostream& operator<<(std::ostream& out, const ProcessOsdUpdateQOIType& obj);

typedef struct _ProcessTSPacketType__isset {
  _ProcessTSPacketType__isset() : ts(false) {}
  bool ts :1;
} _ProcessTSPacketType__isset;

class ProcessTSPacketType : public virtual ::apache::thrift::TBase {
 public:

  ProcessTSPacketType(const ProcessTSPacketType&);
  ProcessTSPacketType& operator=(const ProcessTSPacketType&);
  ProcessTSPacketType() noexcept;

  virtual ~ProcessTSPacketType() noexcept;
  std::string ts;

  _ProcessTSPacketType__isset __isset;

  void __set_ts(const std::string& val);

  bool operator == (const ProcessTSPacketType & rhs) const;
  bool operator != (const ProcessTSPacketType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessTSPacketType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ProcessTSPacketType &a, ProcessTSPacketType &b);

std::ostream& operator<<(std::ostream& out, const ProcessTSPacketType& obj);

typedef struct _StartVideoType__isset {
  _StartVideoType__isset() : videoInfo(false) {}
  bool videoInfo :1;
} _StartVideoType__isset;

class StartVideoType : public virtual ::apache::thrift::TBase {
 public:

  StartVideoType(const StartVideoType&);
  StartVideoType& operator=(const StartVideoType&);
  StartVideoType() noexcept;

  virtual ~StartVideoType() noexcept;
  std::string videoInfo;

  _StartVideoType__isset __isset;

  void __set_videoInfo(const std::string& val);

  bool operator == (const StartVideoType & rhs) const;
  bool operator != (const StartVideoType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StartVideoType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(StartVideoType &a, StartVideoType &b);

std::ostream& operator<<(std::ostream& out, const StartVideoType& obj);

typedef struct _VideoSizeType__isset {
  _VideoSizeType__isset() : x(false), y(false), w(false), h(false) {}
  bool x :1;
  bool y :1;
  bool w :1;
  bool h :1;
} _VideoSizeType__isset;

class VideoSizeType : public virtual ::apache::thrift::TBase {
 public:

  VideoSizeType(const VideoSizeType&) noexcept;
  VideoSizeType& operator=(const VideoSizeType&) noexcept;
  VideoSizeType() noexcept;

  virtual ~VideoSizeType() noexcept;
  int32_t x;
  int32_t y;
  int32_t w;
  int32_t h;

  _VideoSizeType__isset __isset;

  void __set_x(const int32_t val);

  void __set_y(const int32_t val);

  void __set_w(const int32_t val);

  void __set_h(const int32_t val);

  bool operator == (const VideoSizeType & rhs) const;
  bool operator != (const VideoSizeType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VideoSizeType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(VideoSizeType &a, VideoSizeType &b);

std::ostream& operator<<(std::ostream& out, const VideoSizeType& obj);

typedef struct _ResetVideoType__isset {
  _ResetVideoType__isset() : videoInfo(false) {}
  bool videoInfo :1;
} _ResetVideoType__isset;

class ResetVideoType : public virtual ::apache::thrift::TBase {
 public:

  ResetVideoType(const ResetVideoType&);
  ResetVideoType& operator=(const ResetVideoType&);
  ResetVideoType() noexcept;

  virtual ~ResetVideoType() noexcept;
  std::string videoInfo;

  _ResetVideoType__isset __isset;

  void __set_videoInfo(const std::string& val);

  bool operator == (const ResetVideoType & rhs) const;
  bool operator != (const ResetVideoType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResetVideoType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ResetVideoType &a, ResetVideoType &b);

std::ostream& operator<<(std::ostream& out, const ResetVideoType& obj);

typedef struct _SelectAudioTrackType__isset {
  _SelectAudioTrackType__isset() : audioTrack(false) {}
  bool audioTrack :1;
} _SelectAudioTrackType__isset;

class SelectAudioTrackType : public virtual ::apache::thrift::TBase {
 public:

  SelectAudioTrackType(const SelectAudioTrackType&);
  SelectAudioTrackType& operator=(const SelectAudioTrackType&);
  SelectAudioTrackType() noexcept;

  virtual ~SelectAudioTrackType() noexcept;
  std::string audioTrack;

  _SelectAudioTrackType__isset __isset;

  void __set_audioTrack(const std::string& val);

  bool operator == (const SelectAudioTrackType & rhs) const;
  bool operator != (const SelectAudioTrackType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelectAudioTrackType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(SelectAudioTrackType &a, SelectAudioTrackType &b);

std::ostream& operator<<(std::ostream& out, const SelectAudioTrackType& obj);

} // namespace

#endif
