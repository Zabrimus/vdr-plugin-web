/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "pluginweb_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace pluginweb {


ProcessOsdUpdateType::~ProcessOsdUpdateType() noexcept {
}

ProcessOsdUpdateType::ProcessOsdUpdateType() noexcept
   : disp_width(0),
     disp_height(0),
     x(0),
     y(0),
     width(0),
     height(0),
     data() {
}

void ProcessOsdUpdateType::__set_disp_width(const int32_t val) {
  this->disp_width = val;
}

void ProcessOsdUpdateType::__set_disp_height(const int32_t val) {
  this->disp_height = val;
}

void ProcessOsdUpdateType::__set_x(const int32_t val) {
  this->x = val;
}

void ProcessOsdUpdateType::__set_y(const int32_t val) {
  this->y = val;
}

void ProcessOsdUpdateType::__set_width(const int32_t val) {
  this->width = val;
}

void ProcessOsdUpdateType::__set_height(const int32_t val) {
  this->height = val;
}

void ProcessOsdUpdateType::__set_data(const std::string& val) {
  this->data = val;
}
std::ostream& operator<<(std::ostream& out, const ProcessOsdUpdateType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ProcessOsdUpdateType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->disp_width);
          this->__isset.disp_width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->disp_height);
          this->__isset.disp_height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->width);
          this->__isset.width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->height);
          this->__isset.height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProcessOsdUpdateType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProcessOsdUpdateType");

  xfer += oprot->writeFieldBegin("disp_width", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->disp_width);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("disp_height", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->disp_height);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("width", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->width);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("height", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->height);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeBinary(this->data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProcessOsdUpdateType &a, ProcessOsdUpdateType &b) {
  using ::std::swap;
  swap(a.disp_width, b.disp_width);
  swap(a.disp_height, b.disp_height);
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.width, b.width);
  swap(a.height, b.height);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

bool ProcessOsdUpdateType::operator==(const ProcessOsdUpdateType & rhs) const
{
  if (!(disp_width == rhs.disp_width))
    return false;
  if (!(disp_height == rhs.disp_height))
    return false;
  if (!(x == rhs.x))
    return false;
  if (!(y == rhs.y))
    return false;
  if (!(width == rhs.width))
    return false;
  if (!(height == rhs.height))
    return false;
  if (!(data == rhs.data))
    return false;
  return true;
}

ProcessOsdUpdateType::ProcessOsdUpdateType(const ProcessOsdUpdateType& other0) {
  disp_width = other0.disp_width;
  disp_height = other0.disp_height;
  x = other0.x;
  y = other0.y;
  width = other0.width;
  height = other0.height;
  data = other0.data;
  __isset = other0.__isset;
}
ProcessOsdUpdateType& ProcessOsdUpdateType::operator=(const ProcessOsdUpdateType& other1) {
  disp_width = other1.disp_width;
  disp_height = other1.disp_height;
  x = other1.x;
  y = other1.y;
  width = other1.width;
  height = other1.height;
  data = other1.data;
  __isset = other1.__isset;
  return *this;
}
void ProcessOsdUpdateType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProcessOsdUpdateType(";
  out << "disp_width=" << to_string(disp_width);
  out << ", " << "disp_height=" << to_string(disp_height);
  out << ", " << "x=" << to_string(x);
  out << ", " << "y=" << to_string(y);
  out << ", " << "width=" << to_string(width);
  out << ", " << "height=" << to_string(height);
  out << ", " << "data=" << to_string(data);
  out << ")";
}


ProcessOsdUpdateQOIType::~ProcessOsdUpdateQOIType() noexcept {
}

ProcessOsdUpdateQOIType::ProcessOsdUpdateQOIType() noexcept
   : render_width(0),
     render_height(0),
     x(0),
     y(0),
     image_data() {
}

void ProcessOsdUpdateQOIType::__set_render_width(const int32_t val) {
  this->render_width = val;
}

void ProcessOsdUpdateQOIType::__set_render_height(const int32_t val) {
  this->render_height = val;
}

void ProcessOsdUpdateQOIType::__set_x(const int32_t val) {
  this->x = val;
}

void ProcessOsdUpdateQOIType::__set_y(const int32_t val) {
  this->y = val;
}

void ProcessOsdUpdateQOIType::__set_image_data(const std::string& val) {
  this->image_data = val;
}
std::ostream& operator<<(std::ostream& out, const ProcessOsdUpdateQOIType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ProcessOsdUpdateQOIType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->render_width);
          this->__isset.render_width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->render_height);
          this->__isset.render_height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->image_data);
          this->__isset.image_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProcessOsdUpdateQOIType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProcessOsdUpdateQOIType");

  xfer += oprot->writeFieldBegin("render_width", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->render_width);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("render_height", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->render_height);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("image_data", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeBinary(this->image_data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProcessOsdUpdateQOIType &a, ProcessOsdUpdateQOIType &b) {
  using ::std::swap;
  swap(a.render_width, b.render_width);
  swap(a.render_height, b.render_height);
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.image_data, b.image_data);
  swap(a.__isset, b.__isset);
}

bool ProcessOsdUpdateQOIType::operator==(const ProcessOsdUpdateQOIType & rhs) const
{
  if (!(render_width == rhs.render_width))
    return false;
  if (!(render_height == rhs.render_height))
    return false;
  if (!(x == rhs.x))
    return false;
  if (!(y == rhs.y))
    return false;
  if (!(image_data == rhs.image_data))
    return false;
  return true;
}

ProcessOsdUpdateQOIType::ProcessOsdUpdateQOIType(const ProcessOsdUpdateQOIType& other2) {
  render_width = other2.render_width;
  render_height = other2.render_height;
  x = other2.x;
  y = other2.y;
  image_data = other2.image_data;
  __isset = other2.__isset;
}
ProcessOsdUpdateQOIType& ProcessOsdUpdateQOIType::operator=(const ProcessOsdUpdateQOIType& other3) {
  render_width = other3.render_width;
  render_height = other3.render_height;
  x = other3.x;
  y = other3.y;
  image_data = other3.image_data;
  __isset = other3.__isset;
  return *this;
}
void ProcessOsdUpdateQOIType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProcessOsdUpdateQOIType(";
  out << "render_width=" << to_string(render_width);
  out << ", " << "render_height=" << to_string(render_height);
  out << ", " << "x=" << to_string(x);
  out << ", " << "y=" << to_string(y);
  out << ", " << "image_data=" << to_string(image_data);
  out << ")";
}


ProcessTSPacketType::~ProcessTSPacketType() noexcept {
}

ProcessTSPacketType::ProcessTSPacketType() noexcept
   : ts() {
}

void ProcessTSPacketType::__set_ts(const std::string& val) {
  this->ts = val;
}
std::ostream& operator<<(std::ostream& out, const ProcessTSPacketType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ProcessTSPacketType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->ts);
          this->__isset.ts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProcessTSPacketType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProcessTSPacketType");

  xfer += oprot->writeFieldBegin("ts", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->ts);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProcessTSPacketType &a, ProcessTSPacketType &b) {
  using ::std::swap;
  swap(a.ts, b.ts);
  swap(a.__isset, b.__isset);
}

bool ProcessTSPacketType::operator==(const ProcessTSPacketType & rhs) const
{
  if (!(ts == rhs.ts))
    return false;
  return true;
}

ProcessTSPacketType::ProcessTSPacketType(const ProcessTSPacketType& other4) {
  ts = other4.ts;
  __isset = other4.__isset;
}
ProcessTSPacketType& ProcessTSPacketType::operator=(const ProcessTSPacketType& other5) {
  ts = other5.ts;
  __isset = other5.__isset;
  return *this;
}
void ProcessTSPacketType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProcessTSPacketType(";
  out << "ts=" << to_string(ts);
  out << ")";
}


StartVideoType::~StartVideoType() noexcept {
}

StartVideoType::StartVideoType() noexcept
   : videoInfo() {
}

void StartVideoType::__set_videoInfo(const std::string& val) {
  this->videoInfo = val;
}
std::ostream& operator<<(std::ostream& out, const StartVideoType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t StartVideoType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->videoInfo);
          this->__isset.videoInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t StartVideoType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("StartVideoType");

  xfer += oprot->writeFieldBegin("videoInfo", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->videoInfo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StartVideoType &a, StartVideoType &b) {
  using ::std::swap;
  swap(a.videoInfo, b.videoInfo);
  swap(a.__isset, b.__isset);
}

bool StartVideoType::operator==(const StartVideoType & rhs) const
{
  if (!(videoInfo == rhs.videoInfo))
    return false;
  return true;
}

StartVideoType::StartVideoType(const StartVideoType& other6) {
  videoInfo = other6.videoInfo;
  __isset = other6.__isset;
}
StartVideoType& StartVideoType::operator=(const StartVideoType& other7) {
  videoInfo = other7.videoInfo;
  __isset = other7.__isset;
  return *this;
}
void StartVideoType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StartVideoType(";
  out << "videoInfo=" << to_string(videoInfo);
  out << ")";
}


VideoSizeType::~VideoSizeType() noexcept {
}

VideoSizeType::VideoSizeType() noexcept
   : x(0),
     y(0),
     w(0),
     h(0) {
}

void VideoSizeType::__set_x(const int32_t val) {
  this->x = val;
}

void VideoSizeType::__set_y(const int32_t val) {
  this->y = val;
}

void VideoSizeType::__set_w(const int32_t val) {
  this->w = val;
}

void VideoSizeType::__set_h(const int32_t val) {
  this->h = val;
}
std::ostream& operator<<(std::ostream& out, const VideoSizeType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t VideoSizeType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->w);
          this->__isset.w = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->h);
          this->__isset.h = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VideoSizeType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("VideoSizeType");

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("w", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->w);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("h", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->h);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(VideoSizeType &a, VideoSizeType &b) {
  using ::std::swap;
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.w, b.w);
  swap(a.h, b.h);
  swap(a.__isset, b.__isset);
}

bool VideoSizeType::operator==(const VideoSizeType & rhs) const
{
  if (!(x == rhs.x))
    return false;
  if (!(y == rhs.y))
    return false;
  if (!(w == rhs.w))
    return false;
  if (!(h == rhs.h))
    return false;
  return true;
}

VideoSizeType::VideoSizeType(const VideoSizeType& other8) noexcept {
  x = other8.x;
  y = other8.y;
  w = other8.w;
  h = other8.h;
  __isset = other8.__isset;
}
VideoSizeType& VideoSizeType::operator=(const VideoSizeType& other9) noexcept {
  x = other9.x;
  y = other9.y;
  w = other9.w;
  h = other9.h;
  __isset = other9.__isset;
  return *this;
}
void VideoSizeType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "VideoSizeType(";
  out << "x=" << to_string(x);
  out << ", " << "y=" << to_string(y);
  out << ", " << "w=" << to_string(w);
  out << ", " << "h=" << to_string(h);
  out << ")";
}


ResetVideoType::~ResetVideoType() noexcept {
}

ResetVideoType::ResetVideoType() noexcept
   : videoInfo() {
}

void ResetVideoType::__set_videoInfo(const std::string& val) {
  this->videoInfo = val;
}
std::ostream& operator<<(std::ostream& out, const ResetVideoType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ResetVideoType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->videoInfo);
          this->__isset.videoInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResetVideoType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ResetVideoType");

  xfer += oprot->writeFieldBegin("videoInfo", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->videoInfo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ResetVideoType &a, ResetVideoType &b) {
  using ::std::swap;
  swap(a.videoInfo, b.videoInfo);
  swap(a.__isset, b.__isset);
}

bool ResetVideoType::operator==(const ResetVideoType & rhs) const
{
  if (!(videoInfo == rhs.videoInfo))
    return false;
  return true;
}

ResetVideoType::ResetVideoType(const ResetVideoType& other10) {
  videoInfo = other10.videoInfo;
  __isset = other10.__isset;
}
ResetVideoType& ResetVideoType::operator=(const ResetVideoType& other11) {
  videoInfo = other11.videoInfo;
  __isset = other11.__isset;
  return *this;
}
void ResetVideoType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ResetVideoType(";
  out << "videoInfo=" << to_string(videoInfo);
  out << ")";
}


SelectAudioTrackType::~SelectAudioTrackType() noexcept {
}

SelectAudioTrackType::SelectAudioTrackType() noexcept
   : audioTrack() {
}

void SelectAudioTrackType::__set_audioTrack(const std::string& val) {
  this->audioTrack = val;
}
std::ostream& operator<<(std::ostream& out, const SelectAudioTrackType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SelectAudioTrackType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->audioTrack);
          this->__isset.audioTrack = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SelectAudioTrackType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SelectAudioTrackType");

  xfer += oprot->writeFieldBegin("audioTrack", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->audioTrack);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SelectAudioTrackType &a, SelectAudioTrackType &b) {
  using ::std::swap;
  swap(a.audioTrack, b.audioTrack);
  swap(a.__isset, b.__isset);
}

bool SelectAudioTrackType::operator==(const SelectAudioTrackType & rhs) const
{
  if (!(audioTrack == rhs.audioTrack))
    return false;
  return true;
}

SelectAudioTrackType::SelectAudioTrackType(const SelectAudioTrackType& other12) {
  audioTrack = other12.audioTrack;
  __isset = other12.__isset;
}
SelectAudioTrackType& SelectAudioTrackType::operator=(const SelectAudioTrackType& other13) {
  audioTrack = other13.audioTrack;
  __isset = other13.__isset;
  return *this;
}
void SelectAudioTrackType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SelectAudioTrackType(";
  out << "audioTrack=" << to_string(audioTrack);
  out << ")";
}

} // namespace
