/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CefBrowser_H
#define CefBrowser_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "cefbrowser_types.h"
#include "CommonService.h"

namespace cefbrowser {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CefBrowserIf : virtual public  ::common::CommonServiceIf {
 public:
  virtual ~CefBrowserIf() {}
  virtual bool LoadUrl(const LoadUrlType& input) = 0;
  virtual bool RedButton(const RedButtonType& input) = 0;
  virtual bool ReloadOSD() = 0;
  virtual bool StartApplication(const StartApplicationType& input) = 0;
  virtual bool ProcessKey(const ProcessKeyType& input) = 0;
  virtual bool StreamError(const StreamErrorType& input) = 0;
  virtual bool InsertHbbtv(const InsertHbbtvType& input) = 0;
  virtual bool InsertChannel(const InsertChannelType& input) = 0;
  virtual bool StopVideo(const StopVideoType& input) = 0;
};

class CefBrowserIfFactory : virtual public  ::common::CommonServiceIfFactory {
 public:
  typedef CefBrowserIf Handler;

  virtual ~CefBrowserIfFactory() {}

  virtual CefBrowserIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) override = 0;
  virtual void releaseHandler( ::common::CommonServiceIf* /* handler */) override = 0;
  };

class CefBrowserIfSingletonFactory : virtual public CefBrowserIfFactory {
 public:
  CefBrowserIfSingletonFactory(const ::std::shared_ptr<CefBrowserIf>& iface) : iface_(iface) {}
  virtual ~CefBrowserIfSingletonFactory() {}

  virtual CefBrowserIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler( ::common::CommonServiceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<CefBrowserIf> iface_;
};

class CefBrowserNull : virtual public CefBrowserIf , virtual public  ::common::CommonServiceNull {
 public:
  virtual ~CefBrowserNull() {}
  bool LoadUrl(const LoadUrlType& /* input */) override {
    bool _return = false;
    return _return;
  }
  bool RedButton(const RedButtonType& /* input */) override {
    bool _return = false;
    return _return;
  }
  bool ReloadOSD() override {
    bool _return = false;
    return _return;
  }
  bool StartApplication(const StartApplicationType& /* input */) override {
    bool _return = false;
    return _return;
  }
  bool ProcessKey(const ProcessKeyType& /* input */) override {
    bool _return = false;
    return _return;
  }
  bool StreamError(const StreamErrorType& /* input */) override {
    bool _return = false;
    return _return;
  }
  bool InsertHbbtv(const InsertHbbtvType& /* input */) override {
    bool _return = false;
    return _return;
  }
  bool InsertChannel(const InsertChannelType& /* input */) override {
    bool _return = false;
    return _return;
  }
  bool StopVideo(const StopVideoType& /* input */) override {
    bool _return = false;
    return _return;
  }
};

typedef struct _CefBrowser_LoadUrl_args__isset {
  _CefBrowser_LoadUrl_args__isset() : input(false) {}
  bool input :1;
} _CefBrowser_LoadUrl_args__isset;

class CefBrowser_LoadUrl_args {
 public:

  CefBrowser_LoadUrl_args(const CefBrowser_LoadUrl_args&);
  CefBrowser_LoadUrl_args& operator=(const CefBrowser_LoadUrl_args&);
  CefBrowser_LoadUrl_args() noexcept;

  virtual ~CefBrowser_LoadUrl_args() noexcept;
  LoadUrlType input;

  _CefBrowser_LoadUrl_args__isset __isset;

  void __set_input(const LoadUrlType& val);

  bool operator == (const CefBrowser_LoadUrl_args & rhs) const;
  bool operator != (const CefBrowser_LoadUrl_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CefBrowser_LoadUrl_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CefBrowser_LoadUrl_pargs {
 public:


  virtual ~CefBrowser_LoadUrl_pargs() noexcept;
  const LoadUrlType* input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CefBrowser_LoadUrl_result__isset {
  _CefBrowser_LoadUrl_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _CefBrowser_LoadUrl_result__isset;

class CefBrowser_LoadUrl_result {
 public:

  CefBrowser_LoadUrl_result(const CefBrowser_LoadUrl_result&);
  CefBrowser_LoadUrl_result& operator=(const CefBrowser_LoadUrl_result&);
  CefBrowser_LoadUrl_result() noexcept;

  virtual ~CefBrowser_LoadUrl_result() noexcept;
  bool success;
   ::common::OperationFailed err;

  _CefBrowser_LoadUrl_result__isset __isset;

  void __set_success(const bool val);

  void __set_err(const  ::common::OperationFailed& val);

  bool operator == (const CefBrowser_LoadUrl_result & rhs) const;
  bool operator != (const CefBrowser_LoadUrl_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CefBrowser_LoadUrl_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CefBrowser_LoadUrl_presult__isset {
  _CefBrowser_LoadUrl_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _CefBrowser_LoadUrl_presult__isset;

class CefBrowser_LoadUrl_presult {
 public:


  virtual ~CefBrowser_LoadUrl_presult() noexcept;
  bool* success;
   ::common::OperationFailed err;

  _CefBrowser_LoadUrl_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CefBrowser_RedButton_args__isset {
  _CefBrowser_RedButton_args__isset() : input(false) {}
  bool input :1;
} _CefBrowser_RedButton_args__isset;

class CefBrowser_RedButton_args {
 public:

  CefBrowser_RedButton_args(const CefBrowser_RedButton_args&);
  CefBrowser_RedButton_args& operator=(const CefBrowser_RedButton_args&);
  CefBrowser_RedButton_args() noexcept;

  virtual ~CefBrowser_RedButton_args() noexcept;
  RedButtonType input;

  _CefBrowser_RedButton_args__isset __isset;

  void __set_input(const RedButtonType& val);

  bool operator == (const CefBrowser_RedButton_args & rhs) const;
  bool operator != (const CefBrowser_RedButton_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CefBrowser_RedButton_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CefBrowser_RedButton_pargs {
 public:


  virtual ~CefBrowser_RedButton_pargs() noexcept;
  const RedButtonType* input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CefBrowser_RedButton_result__isset {
  _CefBrowser_RedButton_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _CefBrowser_RedButton_result__isset;

class CefBrowser_RedButton_result {
 public:

  CefBrowser_RedButton_result(const CefBrowser_RedButton_result&);
  CefBrowser_RedButton_result& operator=(const CefBrowser_RedButton_result&);
  CefBrowser_RedButton_result() noexcept;

  virtual ~CefBrowser_RedButton_result() noexcept;
  bool success;
   ::common::OperationFailed err;

  _CefBrowser_RedButton_result__isset __isset;

  void __set_success(const bool val);

  void __set_err(const  ::common::OperationFailed& val);

  bool operator == (const CefBrowser_RedButton_result & rhs) const;
  bool operator != (const CefBrowser_RedButton_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CefBrowser_RedButton_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CefBrowser_RedButton_presult__isset {
  _CefBrowser_RedButton_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _CefBrowser_RedButton_presult__isset;

class CefBrowser_RedButton_presult {
 public:


  virtual ~CefBrowser_RedButton_presult() noexcept;
  bool* success;
   ::common::OperationFailed err;

  _CefBrowser_RedButton_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CefBrowser_ReloadOSD_args {
 public:

  CefBrowser_ReloadOSD_args(const CefBrowser_ReloadOSD_args&) noexcept;
  CefBrowser_ReloadOSD_args& operator=(const CefBrowser_ReloadOSD_args&) noexcept;
  CefBrowser_ReloadOSD_args() noexcept;

  virtual ~CefBrowser_ReloadOSD_args() noexcept;

  bool operator == (const CefBrowser_ReloadOSD_args & /* rhs */) const;
  bool operator != (const CefBrowser_ReloadOSD_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CefBrowser_ReloadOSD_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CefBrowser_ReloadOSD_pargs {
 public:


  virtual ~CefBrowser_ReloadOSD_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CefBrowser_ReloadOSD_result__isset {
  _CefBrowser_ReloadOSD_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _CefBrowser_ReloadOSD_result__isset;

class CefBrowser_ReloadOSD_result {
 public:

  CefBrowser_ReloadOSD_result(const CefBrowser_ReloadOSD_result&);
  CefBrowser_ReloadOSD_result& operator=(const CefBrowser_ReloadOSD_result&);
  CefBrowser_ReloadOSD_result() noexcept;

  virtual ~CefBrowser_ReloadOSD_result() noexcept;
  bool success;
   ::common::OperationFailed err;

  _CefBrowser_ReloadOSD_result__isset __isset;

  void __set_success(const bool val);

  void __set_err(const  ::common::OperationFailed& val);

  bool operator == (const CefBrowser_ReloadOSD_result & rhs) const;
  bool operator != (const CefBrowser_ReloadOSD_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CefBrowser_ReloadOSD_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CefBrowser_ReloadOSD_presult__isset {
  _CefBrowser_ReloadOSD_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _CefBrowser_ReloadOSD_presult__isset;

class CefBrowser_ReloadOSD_presult {
 public:


  virtual ~CefBrowser_ReloadOSD_presult() noexcept;
  bool* success;
   ::common::OperationFailed err;

  _CefBrowser_ReloadOSD_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CefBrowser_StartApplication_args__isset {
  _CefBrowser_StartApplication_args__isset() : input(false) {}
  bool input :1;
} _CefBrowser_StartApplication_args__isset;

class CefBrowser_StartApplication_args {
 public:

  CefBrowser_StartApplication_args(const CefBrowser_StartApplication_args&);
  CefBrowser_StartApplication_args& operator=(const CefBrowser_StartApplication_args&);
  CefBrowser_StartApplication_args() noexcept;

  virtual ~CefBrowser_StartApplication_args() noexcept;
  StartApplicationType input;

  _CefBrowser_StartApplication_args__isset __isset;

  void __set_input(const StartApplicationType& val);

  bool operator == (const CefBrowser_StartApplication_args & rhs) const;
  bool operator != (const CefBrowser_StartApplication_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CefBrowser_StartApplication_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CefBrowser_StartApplication_pargs {
 public:


  virtual ~CefBrowser_StartApplication_pargs() noexcept;
  const StartApplicationType* input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CefBrowser_StartApplication_result__isset {
  _CefBrowser_StartApplication_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _CefBrowser_StartApplication_result__isset;

class CefBrowser_StartApplication_result {
 public:

  CefBrowser_StartApplication_result(const CefBrowser_StartApplication_result&);
  CefBrowser_StartApplication_result& operator=(const CefBrowser_StartApplication_result&);
  CefBrowser_StartApplication_result() noexcept;

  virtual ~CefBrowser_StartApplication_result() noexcept;
  bool success;
   ::common::OperationFailed err;

  _CefBrowser_StartApplication_result__isset __isset;

  void __set_success(const bool val);

  void __set_err(const  ::common::OperationFailed& val);

  bool operator == (const CefBrowser_StartApplication_result & rhs) const;
  bool operator != (const CefBrowser_StartApplication_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CefBrowser_StartApplication_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CefBrowser_StartApplication_presult__isset {
  _CefBrowser_StartApplication_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _CefBrowser_StartApplication_presult__isset;

class CefBrowser_StartApplication_presult {
 public:


  virtual ~CefBrowser_StartApplication_presult() noexcept;
  bool* success;
   ::common::OperationFailed err;

  _CefBrowser_StartApplication_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CefBrowser_ProcessKey_args__isset {
  _CefBrowser_ProcessKey_args__isset() : input(false) {}
  bool input :1;
} _CefBrowser_ProcessKey_args__isset;

class CefBrowser_ProcessKey_args {
 public:

  CefBrowser_ProcessKey_args(const CefBrowser_ProcessKey_args&);
  CefBrowser_ProcessKey_args& operator=(const CefBrowser_ProcessKey_args&);
  CefBrowser_ProcessKey_args() noexcept;

  virtual ~CefBrowser_ProcessKey_args() noexcept;
  ProcessKeyType input;

  _CefBrowser_ProcessKey_args__isset __isset;

  void __set_input(const ProcessKeyType& val);

  bool operator == (const CefBrowser_ProcessKey_args & rhs) const;
  bool operator != (const CefBrowser_ProcessKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CefBrowser_ProcessKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CefBrowser_ProcessKey_pargs {
 public:


  virtual ~CefBrowser_ProcessKey_pargs() noexcept;
  const ProcessKeyType* input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CefBrowser_ProcessKey_result__isset {
  _CefBrowser_ProcessKey_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _CefBrowser_ProcessKey_result__isset;

class CefBrowser_ProcessKey_result {
 public:

  CefBrowser_ProcessKey_result(const CefBrowser_ProcessKey_result&);
  CefBrowser_ProcessKey_result& operator=(const CefBrowser_ProcessKey_result&);
  CefBrowser_ProcessKey_result() noexcept;

  virtual ~CefBrowser_ProcessKey_result() noexcept;
  bool success;
   ::common::OperationFailed err;

  _CefBrowser_ProcessKey_result__isset __isset;

  void __set_success(const bool val);

  void __set_err(const  ::common::OperationFailed& val);

  bool operator == (const CefBrowser_ProcessKey_result & rhs) const;
  bool operator != (const CefBrowser_ProcessKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CefBrowser_ProcessKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CefBrowser_ProcessKey_presult__isset {
  _CefBrowser_ProcessKey_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _CefBrowser_ProcessKey_presult__isset;

class CefBrowser_ProcessKey_presult {
 public:


  virtual ~CefBrowser_ProcessKey_presult() noexcept;
  bool* success;
   ::common::OperationFailed err;

  _CefBrowser_ProcessKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CefBrowser_StreamError_args__isset {
  _CefBrowser_StreamError_args__isset() : input(false) {}
  bool input :1;
} _CefBrowser_StreamError_args__isset;

class CefBrowser_StreamError_args {
 public:

  CefBrowser_StreamError_args(const CefBrowser_StreamError_args&);
  CefBrowser_StreamError_args& operator=(const CefBrowser_StreamError_args&);
  CefBrowser_StreamError_args() noexcept;

  virtual ~CefBrowser_StreamError_args() noexcept;
  StreamErrorType input;

  _CefBrowser_StreamError_args__isset __isset;

  void __set_input(const StreamErrorType& val);

  bool operator == (const CefBrowser_StreamError_args & rhs) const;
  bool operator != (const CefBrowser_StreamError_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CefBrowser_StreamError_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CefBrowser_StreamError_pargs {
 public:


  virtual ~CefBrowser_StreamError_pargs() noexcept;
  const StreamErrorType* input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CefBrowser_StreamError_result__isset {
  _CefBrowser_StreamError_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _CefBrowser_StreamError_result__isset;

class CefBrowser_StreamError_result {
 public:

  CefBrowser_StreamError_result(const CefBrowser_StreamError_result&);
  CefBrowser_StreamError_result& operator=(const CefBrowser_StreamError_result&);
  CefBrowser_StreamError_result() noexcept;

  virtual ~CefBrowser_StreamError_result() noexcept;
  bool success;
   ::common::OperationFailed err;

  _CefBrowser_StreamError_result__isset __isset;

  void __set_success(const bool val);

  void __set_err(const  ::common::OperationFailed& val);

  bool operator == (const CefBrowser_StreamError_result & rhs) const;
  bool operator != (const CefBrowser_StreamError_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CefBrowser_StreamError_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CefBrowser_StreamError_presult__isset {
  _CefBrowser_StreamError_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _CefBrowser_StreamError_presult__isset;

class CefBrowser_StreamError_presult {
 public:


  virtual ~CefBrowser_StreamError_presult() noexcept;
  bool* success;
   ::common::OperationFailed err;

  _CefBrowser_StreamError_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CefBrowser_InsertHbbtv_args__isset {
  _CefBrowser_InsertHbbtv_args__isset() : input(false) {}
  bool input :1;
} _CefBrowser_InsertHbbtv_args__isset;

class CefBrowser_InsertHbbtv_args {
 public:

  CefBrowser_InsertHbbtv_args(const CefBrowser_InsertHbbtv_args&);
  CefBrowser_InsertHbbtv_args& operator=(const CefBrowser_InsertHbbtv_args&);
  CefBrowser_InsertHbbtv_args() noexcept;

  virtual ~CefBrowser_InsertHbbtv_args() noexcept;
  InsertHbbtvType input;

  _CefBrowser_InsertHbbtv_args__isset __isset;

  void __set_input(const InsertHbbtvType& val);

  bool operator == (const CefBrowser_InsertHbbtv_args & rhs) const;
  bool operator != (const CefBrowser_InsertHbbtv_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CefBrowser_InsertHbbtv_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CefBrowser_InsertHbbtv_pargs {
 public:


  virtual ~CefBrowser_InsertHbbtv_pargs() noexcept;
  const InsertHbbtvType* input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CefBrowser_InsertHbbtv_result__isset {
  _CefBrowser_InsertHbbtv_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _CefBrowser_InsertHbbtv_result__isset;

class CefBrowser_InsertHbbtv_result {
 public:

  CefBrowser_InsertHbbtv_result(const CefBrowser_InsertHbbtv_result&);
  CefBrowser_InsertHbbtv_result& operator=(const CefBrowser_InsertHbbtv_result&);
  CefBrowser_InsertHbbtv_result() noexcept;

  virtual ~CefBrowser_InsertHbbtv_result() noexcept;
  bool success;
   ::common::OperationFailed err;

  _CefBrowser_InsertHbbtv_result__isset __isset;

  void __set_success(const bool val);

  void __set_err(const  ::common::OperationFailed& val);

  bool operator == (const CefBrowser_InsertHbbtv_result & rhs) const;
  bool operator != (const CefBrowser_InsertHbbtv_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CefBrowser_InsertHbbtv_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CefBrowser_InsertHbbtv_presult__isset {
  _CefBrowser_InsertHbbtv_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _CefBrowser_InsertHbbtv_presult__isset;

class CefBrowser_InsertHbbtv_presult {
 public:


  virtual ~CefBrowser_InsertHbbtv_presult() noexcept;
  bool* success;
   ::common::OperationFailed err;

  _CefBrowser_InsertHbbtv_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CefBrowser_InsertChannel_args__isset {
  _CefBrowser_InsertChannel_args__isset() : input(false) {}
  bool input :1;
} _CefBrowser_InsertChannel_args__isset;

class CefBrowser_InsertChannel_args {
 public:

  CefBrowser_InsertChannel_args(const CefBrowser_InsertChannel_args&);
  CefBrowser_InsertChannel_args& operator=(const CefBrowser_InsertChannel_args&);
  CefBrowser_InsertChannel_args() noexcept;

  virtual ~CefBrowser_InsertChannel_args() noexcept;
  InsertChannelType input;

  _CefBrowser_InsertChannel_args__isset __isset;

  void __set_input(const InsertChannelType& val);

  bool operator == (const CefBrowser_InsertChannel_args & rhs) const;
  bool operator != (const CefBrowser_InsertChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CefBrowser_InsertChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CefBrowser_InsertChannel_pargs {
 public:


  virtual ~CefBrowser_InsertChannel_pargs() noexcept;
  const InsertChannelType* input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CefBrowser_InsertChannel_result__isset {
  _CefBrowser_InsertChannel_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _CefBrowser_InsertChannel_result__isset;

class CefBrowser_InsertChannel_result {
 public:

  CefBrowser_InsertChannel_result(const CefBrowser_InsertChannel_result&);
  CefBrowser_InsertChannel_result& operator=(const CefBrowser_InsertChannel_result&);
  CefBrowser_InsertChannel_result() noexcept;

  virtual ~CefBrowser_InsertChannel_result() noexcept;
  bool success;
   ::common::OperationFailed err;

  _CefBrowser_InsertChannel_result__isset __isset;

  void __set_success(const bool val);

  void __set_err(const  ::common::OperationFailed& val);

  bool operator == (const CefBrowser_InsertChannel_result & rhs) const;
  bool operator != (const CefBrowser_InsertChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CefBrowser_InsertChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CefBrowser_InsertChannel_presult__isset {
  _CefBrowser_InsertChannel_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _CefBrowser_InsertChannel_presult__isset;

class CefBrowser_InsertChannel_presult {
 public:


  virtual ~CefBrowser_InsertChannel_presult() noexcept;
  bool* success;
   ::common::OperationFailed err;

  _CefBrowser_InsertChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CefBrowser_StopVideo_args__isset {
  _CefBrowser_StopVideo_args__isset() : input(false) {}
  bool input :1;
} _CefBrowser_StopVideo_args__isset;

class CefBrowser_StopVideo_args {
 public:

  CefBrowser_StopVideo_args(const CefBrowser_StopVideo_args&);
  CefBrowser_StopVideo_args& operator=(const CefBrowser_StopVideo_args&);
  CefBrowser_StopVideo_args() noexcept;

  virtual ~CefBrowser_StopVideo_args() noexcept;
  StopVideoType input;

  _CefBrowser_StopVideo_args__isset __isset;

  void __set_input(const StopVideoType& val);

  bool operator == (const CefBrowser_StopVideo_args & rhs) const;
  bool operator != (const CefBrowser_StopVideo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CefBrowser_StopVideo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CefBrowser_StopVideo_pargs {
 public:


  virtual ~CefBrowser_StopVideo_pargs() noexcept;
  const StopVideoType* input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CefBrowser_StopVideo_result__isset {
  _CefBrowser_StopVideo_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _CefBrowser_StopVideo_result__isset;

class CefBrowser_StopVideo_result {
 public:

  CefBrowser_StopVideo_result(const CefBrowser_StopVideo_result&);
  CefBrowser_StopVideo_result& operator=(const CefBrowser_StopVideo_result&);
  CefBrowser_StopVideo_result() noexcept;

  virtual ~CefBrowser_StopVideo_result() noexcept;
  bool success;
   ::common::OperationFailed err;

  _CefBrowser_StopVideo_result__isset __isset;

  void __set_success(const bool val);

  void __set_err(const  ::common::OperationFailed& val);

  bool operator == (const CefBrowser_StopVideo_result & rhs) const;
  bool operator != (const CefBrowser_StopVideo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CefBrowser_StopVideo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CefBrowser_StopVideo_presult__isset {
  _CefBrowser_StopVideo_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _CefBrowser_StopVideo_presult__isset;

class CefBrowser_StopVideo_presult {
 public:


  virtual ~CefBrowser_StopVideo_presult() noexcept;
  bool* success;
   ::common::OperationFailed err;

  _CefBrowser_StopVideo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CefBrowserClient : virtual public CefBrowserIf, public  ::common::CommonServiceClient {
 public:
  CefBrowserClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::common::CommonServiceClient(prot, prot) {}
  CefBrowserClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::common::CommonServiceClient(iprot, oprot) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool LoadUrl(const LoadUrlType& input) override;
  void send_LoadUrl(const LoadUrlType& input);
  bool recv_LoadUrl();
  bool RedButton(const RedButtonType& input) override;
  void send_RedButton(const RedButtonType& input);
  bool recv_RedButton();
  bool ReloadOSD() override;
  void send_ReloadOSD();
  bool recv_ReloadOSD();
  bool StartApplication(const StartApplicationType& input) override;
  void send_StartApplication(const StartApplicationType& input);
  bool recv_StartApplication();
  bool ProcessKey(const ProcessKeyType& input) override;
  void send_ProcessKey(const ProcessKeyType& input);
  bool recv_ProcessKey();
  bool StreamError(const StreamErrorType& input) override;
  void send_StreamError(const StreamErrorType& input);
  bool recv_StreamError();
  bool InsertHbbtv(const InsertHbbtvType& input) override;
  void send_InsertHbbtv(const InsertHbbtvType& input);
  bool recv_InsertHbbtv();
  bool InsertChannel(const InsertChannelType& input) override;
  void send_InsertChannel(const InsertChannelType& input);
  bool recv_InsertChannel();
  bool StopVideo(const StopVideoType& input) override;
  void send_StopVideo(const StopVideoType& input);
  bool recv_StopVideo();
};

class CefBrowserProcessor : public  ::common::CommonServiceProcessor {
 protected:
  ::std::shared_ptr<CefBrowserIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (CefBrowserProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_LoadUrl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RedButton(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReloadOSD(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_StartApplication(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ProcessKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_StreamError(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_InsertHbbtv(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_InsertChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_StopVideo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CefBrowserProcessor(::std::shared_ptr<CefBrowserIf> iface) :
     ::common::CommonServiceProcessor(iface),
    iface_(iface) {
    processMap_["LoadUrl"] = &CefBrowserProcessor::process_LoadUrl;
    processMap_["RedButton"] = &CefBrowserProcessor::process_RedButton;
    processMap_["ReloadOSD"] = &CefBrowserProcessor::process_ReloadOSD;
    processMap_["StartApplication"] = &CefBrowserProcessor::process_StartApplication;
    processMap_["ProcessKey"] = &CefBrowserProcessor::process_ProcessKey;
    processMap_["StreamError"] = &CefBrowserProcessor::process_StreamError;
    processMap_["InsertHbbtv"] = &CefBrowserProcessor::process_InsertHbbtv;
    processMap_["InsertChannel"] = &CefBrowserProcessor::process_InsertChannel;
    processMap_["StopVideo"] = &CefBrowserProcessor::process_StopVideo;
  }

  virtual ~CefBrowserProcessor() {}
};

class CefBrowserProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CefBrowserProcessorFactory(const ::std::shared_ptr< CefBrowserIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< CefBrowserIfFactory > handlerFactory_;
};

class CefBrowserMultiface : virtual public CefBrowserIf, public  ::common::CommonServiceMultiface {
 public:
  CefBrowserMultiface(std::vector<std::shared_ptr<CefBrowserIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<std::shared_ptr<CefBrowserIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::common::CommonServiceMultiface::add(*iter);
    }
  }
  virtual ~CefBrowserMultiface() {}
 protected:
  std::vector<std::shared_ptr<CefBrowserIf> > ifaces_;
  CefBrowserMultiface() {}
  void add(::std::shared_ptr<CefBrowserIf> iface) {
     ::common::CommonServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  bool LoadUrl(const LoadUrlType& input) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LoadUrl(input);
    }
    return ifaces_[i]->LoadUrl(input);
  }

  bool RedButton(const RedButtonType& input) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RedButton(input);
    }
    return ifaces_[i]->RedButton(input);
  }

  bool ReloadOSD() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReloadOSD();
    }
    return ifaces_[i]->ReloadOSD();
  }

  bool StartApplication(const StartApplicationType& input) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->StartApplication(input);
    }
    return ifaces_[i]->StartApplication(input);
  }

  bool ProcessKey(const ProcessKeyType& input) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ProcessKey(input);
    }
    return ifaces_[i]->ProcessKey(input);
  }

  bool StreamError(const StreamErrorType& input) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->StreamError(input);
    }
    return ifaces_[i]->StreamError(input);
  }

  bool InsertHbbtv(const InsertHbbtvType& input) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->InsertHbbtv(input);
    }
    return ifaces_[i]->InsertHbbtv(input);
  }

  bool InsertChannel(const InsertChannelType& input) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->InsertChannel(input);
    }
    return ifaces_[i]->InsertChannel(input);
  }

  bool StopVideo(const StopVideoType& input) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->StopVideo(input);
    }
    return ifaces_[i]->StopVideo(input);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CefBrowserConcurrentClient : virtual public CefBrowserIf, public  ::common::CommonServiceConcurrentClient {
 public:
  CefBrowserConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) :
     ::common::CommonServiceConcurrentClient(prot, prot, sync) {}
  CefBrowserConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) :     ::common::CommonServiceConcurrentClient(iprot, oprot, sync) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool LoadUrl(const LoadUrlType& input) override;
  int32_t send_LoadUrl(const LoadUrlType& input);
  bool recv_LoadUrl(const int32_t seqid);
  bool RedButton(const RedButtonType& input) override;
  int32_t send_RedButton(const RedButtonType& input);
  bool recv_RedButton(const int32_t seqid);
  bool ReloadOSD() override;
  int32_t send_ReloadOSD();
  bool recv_ReloadOSD(const int32_t seqid);
  bool StartApplication(const StartApplicationType& input) override;
  int32_t send_StartApplication(const StartApplicationType& input);
  bool recv_StartApplication(const int32_t seqid);
  bool ProcessKey(const ProcessKeyType& input) override;
  int32_t send_ProcessKey(const ProcessKeyType& input);
  bool recv_ProcessKey(const int32_t seqid);
  bool StreamError(const StreamErrorType& input) override;
  int32_t send_StreamError(const StreamErrorType& input);
  bool recv_StreamError(const int32_t seqid);
  bool InsertHbbtv(const InsertHbbtvType& input) override;
  int32_t send_InsertHbbtv(const InsertHbbtvType& input);
  bool recv_InsertHbbtv(const int32_t seqid);
  bool InsertChannel(const InsertChannelType& input) override;
  int32_t send_InsertChannel(const InsertChannelType& input);
  bool recv_InsertChannel(const int32_t seqid);
  bool StopVideo(const StopVideoType& input) override;
  int32_t send_StopVideo(const StopVideoType& input);
  bool recv_StopVideo(const int32_t seqid);
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
