/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef common_TYPES_H
#define common_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace common {

class OperationFailed;

typedef struct _OperationFailed__isset {
  _OperationFailed__isset() : code(false), reason(false) {}
  bool code :1;
  bool reason :1;
} _OperationFailed__isset;

class OperationFailed : public ::apache::thrift::TException {
 public:

  OperationFailed(const OperationFailed&);
  OperationFailed& operator=(const OperationFailed&);
  OperationFailed() noexcept;

  virtual ~OperationFailed() noexcept;
  int32_t code;
  std::string reason;

  _OperationFailed__isset __isset;

  void __set_code(const int32_t val);

  void __set_reason(const std::string& val);

  bool operator == (const OperationFailed & rhs) const;
  bool operator != (const OperationFailed &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OperationFailed & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept override;
};

void swap(OperationFailed &a, OperationFailed &b);

std::ostream& operator<<(std::ostream& out, const OperationFailed& obj);

} // namespace

#endif
