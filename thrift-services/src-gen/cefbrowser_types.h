/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef cefbrowser_TYPES_H
#define cefbrowser_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "common_types.h"


namespace cefbrowser {

class LoadUrlType;

class RedButtonType;

class StartApplicationType;

class ProcessKeyType;

class StreamErrorType;

class InsertHbbtvType;

class InsertChannelType;

class StopVideoType;

typedef struct _LoadUrlType__isset {
  _LoadUrlType__isset() : url(false) {}
  bool url :1;
} _LoadUrlType__isset;

class LoadUrlType : public virtual ::apache::thrift::TBase {
 public:

  LoadUrlType(const LoadUrlType&);
  LoadUrlType& operator=(const LoadUrlType&);
  LoadUrlType() noexcept;

  virtual ~LoadUrlType() noexcept;
  std::string url;

  _LoadUrlType__isset __isset;

  void __set_url(const std::string& val);

  bool operator == (const LoadUrlType & rhs) const;
  bool operator != (const LoadUrlType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LoadUrlType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(LoadUrlType &a, LoadUrlType &b);

std::ostream& operator<<(std::ostream& out, const LoadUrlType& obj);

typedef struct _RedButtonType__isset {
  _RedButtonType__isset() : channelId(false) {}
  bool channelId :1;
} _RedButtonType__isset;

class RedButtonType : public virtual ::apache::thrift::TBase {
 public:

  RedButtonType(const RedButtonType&);
  RedButtonType& operator=(const RedButtonType&);
  RedButtonType() noexcept;

  virtual ~RedButtonType() noexcept;
  std::string channelId;

  _RedButtonType__isset __isset;

  void __set_channelId(const std::string& val);

  bool operator == (const RedButtonType & rhs) const;
  bool operator != (const RedButtonType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RedButtonType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(RedButtonType &a, RedButtonType &b);

std::ostream& operator<<(std::ostream& out, const RedButtonType& obj);

typedef struct _StartApplicationType__isset {
  _StartApplicationType__isset() : channelId(false), appId(false), appCookie(false), appReferrer(false), appUserAgent(false), url(false) {}
  bool channelId :1;
  bool appId :1;
  bool appCookie :1;
  bool appReferrer :1;
  bool appUserAgent :1;
  bool url :1;
} _StartApplicationType__isset;

class StartApplicationType : public virtual ::apache::thrift::TBase {
 public:

  StartApplicationType(const StartApplicationType&);
  StartApplicationType& operator=(const StartApplicationType&);
  StartApplicationType() noexcept;

  virtual ~StartApplicationType() noexcept;
  std::string channelId;
  std::string appId;
  std::string appCookie;
  std::string appReferrer;
  std::string appUserAgent;
  std::string url;

  _StartApplicationType__isset __isset;

  void __set_channelId(const std::string& val);

  void __set_appId(const std::string& val);

  void __set_appCookie(const std::string& val);

  void __set_appReferrer(const std::string& val);

  void __set_appUserAgent(const std::string& val);

  void __set_url(const std::string& val);

  bool operator == (const StartApplicationType & rhs) const;
  bool operator != (const StartApplicationType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StartApplicationType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(StartApplicationType &a, StartApplicationType &b);

std::ostream& operator<<(std::ostream& out, const StartApplicationType& obj);

typedef struct _ProcessKeyType__isset {
  _ProcessKeyType__isset() : key(false) {}
  bool key :1;
} _ProcessKeyType__isset;

class ProcessKeyType : public virtual ::apache::thrift::TBase {
 public:

  ProcessKeyType(const ProcessKeyType&);
  ProcessKeyType& operator=(const ProcessKeyType&);
  ProcessKeyType() noexcept;

  virtual ~ProcessKeyType() noexcept;
  std::string key;

  _ProcessKeyType__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const ProcessKeyType & rhs) const;
  bool operator != (const ProcessKeyType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessKeyType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ProcessKeyType &a, ProcessKeyType &b);

std::ostream& operator<<(std::ostream& out, const ProcessKeyType& obj);

typedef struct _StreamErrorType__isset {
  _StreamErrorType__isset() : reason(false) {}
  bool reason :1;
} _StreamErrorType__isset;

class StreamErrorType : public virtual ::apache::thrift::TBase {
 public:

  StreamErrorType(const StreamErrorType&);
  StreamErrorType& operator=(const StreamErrorType&);
  StreamErrorType() noexcept;

  virtual ~StreamErrorType() noexcept;
  std::string reason;

  _StreamErrorType__isset __isset;

  void __set_reason(const std::string& val);

  bool operator == (const StreamErrorType & rhs) const;
  bool operator != (const StreamErrorType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StreamErrorType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(StreamErrorType &a, StreamErrorType &b);

std::ostream& operator<<(std::ostream& out, const StreamErrorType& obj);

typedef struct _InsertHbbtvType__isset {
  _InsertHbbtvType__isset() : hbbtv(false) {}
  bool hbbtv :1;
} _InsertHbbtvType__isset;

class InsertHbbtvType : public virtual ::apache::thrift::TBase {
 public:

  InsertHbbtvType(const InsertHbbtvType&);
  InsertHbbtvType& operator=(const InsertHbbtvType&);
  InsertHbbtvType() noexcept;

  virtual ~InsertHbbtvType() noexcept;
  std::string hbbtv;

  _InsertHbbtvType__isset __isset;

  void __set_hbbtv(const std::string& val);

  bool operator == (const InsertHbbtvType & rhs) const;
  bool operator != (const InsertHbbtvType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InsertHbbtvType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(InsertHbbtvType &a, InsertHbbtvType &b);

std::ostream& operator<<(std::ostream& out, const InsertHbbtvType& obj);

typedef struct _InsertChannelType__isset {
  _InsertChannelType__isset() : channel(false) {}
  bool channel :1;
} _InsertChannelType__isset;

class InsertChannelType : public virtual ::apache::thrift::TBase {
 public:

  InsertChannelType(const InsertChannelType&);
  InsertChannelType& operator=(const InsertChannelType&);
  InsertChannelType() noexcept;

  virtual ~InsertChannelType() noexcept;
  std::string channel;

  _InsertChannelType__isset __isset;

  void __set_channel(const std::string& val);

  bool operator == (const InsertChannelType & rhs) const;
  bool operator != (const InsertChannelType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InsertChannelType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(InsertChannelType &a, InsertChannelType &b);

std::ostream& operator<<(std::ostream& out, const InsertChannelType& obj);

typedef struct _StopVideoType__isset {
  _StopVideoType__isset() : reason(false) {}
  bool reason :1;
} _StopVideoType__isset;

class StopVideoType : public virtual ::apache::thrift::TBase {
 public:

  StopVideoType(const StopVideoType&);
  StopVideoType& operator=(const StopVideoType&);
  StopVideoType() noexcept;

  virtual ~StopVideoType() noexcept;
  std::string reason;

  _StopVideoType__isset __isset;

  void __set_reason(const std::string& val);

  bool operator == (const StopVideoType & rhs) const;
  bool operator != (const StopVideoType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StopVideoType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(StopVideoType &a, StopVideoType &b);

std::ostream& operator<<(std::ostream& out, const StopVideoType& obj);

} // namespace

#endif
