/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef VdrPluginWeb_H
#define VdrPluginWeb_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "pluginweb_types.h"
#include "CommonService.h"

namespace pluginweb {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class VdrPluginWebIf : virtual public  ::common::CommonServiceIf {
 public:
  virtual ~VdrPluginWebIf() {}
  virtual bool ProcessOsdUpdate(const ProcessOsdUpdateType& input) = 0;
  virtual bool ProcessOsdUpdateQOI(const ProcessOsdUpdateQOIType& input) = 0;
  virtual bool ProcessTSPacket(const ProcessTSPacketType& input) = 0;
  virtual bool StartVideo(const StartVideoType& input) = 0;
  virtual bool StopVideo() = 0;
  virtual bool PauseVideo() = 0;
  virtual bool ResumeVideo() = 0;
  virtual bool Seeked() = 0;
  virtual bool VideoSize(const VideoSizeType& input) = 0;
  virtual bool VideoFullscreen() = 0;
  virtual bool ResetVideo(const ResetVideoType& input) = 0;
  virtual bool SelectAudioTrack(const SelectAudioTrackType& input) = 0;
};

class VdrPluginWebIfFactory : virtual public  ::common::CommonServiceIfFactory {
 public:
  typedef VdrPluginWebIf Handler;

  virtual ~VdrPluginWebIfFactory() {}

  virtual VdrPluginWebIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) override = 0;
  virtual void releaseHandler( ::common::CommonServiceIf* /* handler */) override = 0;
  };

class VdrPluginWebIfSingletonFactory : virtual public VdrPluginWebIfFactory {
 public:
  VdrPluginWebIfSingletonFactory(const ::std::shared_ptr<VdrPluginWebIf>& iface) : iface_(iface) {}
  virtual ~VdrPluginWebIfSingletonFactory() {}

  virtual VdrPluginWebIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler( ::common::CommonServiceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<VdrPluginWebIf> iface_;
};

class VdrPluginWebNull : virtual public VdrPluginWebIf , virtual public  ::common::CommonServiceNull {
 public:
  virtual ~VdrPluginWebNull() {}
  bool ProcessOsdUpdate(const ProcessOsdUpdateType& /* input */) override {
    bool _return = false;
    return _return;
  }
  bool ProcessOsdUpdateQOI(const ProcessOsdUpdateQOIType& /* input */) override {
    bool _return = false;
    return _return;
  }
  bool ProcessTSPacket(const ProcessTSPacketType& /* input */) override {
    bool _return = false;
    return _return;
  }
  bool StartVideo(const StartVideoType& /* input */) override {
    bool _return = false;
    return _return;
  }
  bool StopVideo() override {
    bool _return = false;
    return _return;
  }
  bool PauseVideo() override {
    bool _return = false;
    return _return;
  }
  bool ResumeVideo() override {
    bool _return = false;
    return _return;
  }
  bool Seeked() override {
    bool _return = false;
    return _return;
  }
  bool VideoSize(const VideoSizeType& /* input */) override {
    bool _return = false;
    return _return;
  }
  bool VideoFullscreen() override {
    bool _return = false;
    return _return;
  }
  bool ResetVideo(const ResetVideoType& /* input */) override {
    bool _return = false;
    return _return;
  }
  bool SelectAudioTrack(const SelectAudioTrackType& /* input */) override {
    bool _return = false;
    return _return;
  }
};

typedef struct _VdrPluginWeb_ProcessOsdUpdate_args__isset {
  _VdrPluginWeb_ProcessOsdUpdate_args__isset() : input(false) {}
  bool input :1;
} _VdrPluginWeb_ProcessOsdUpdate_args__isset;

class VdrPluginWeb_ProcessOsdUpdate_args {
 public:

  VdrPluginWeb_ProcessOsdUpdate_args(const VdrPluginWeb_ProcessOsdUpdate_args&);
  VdrPluginWeb_ProcessOsdUpdate_args& operator=(const VdrPluginWeb_ProcessOsdUpdate_args&);
  VdrPluginWeb_ProcessOsdUpdate_args() noexcept;

  virtual ~VdrPluginWeb_ProcessOsdUpdate_args() noexcept;
  ProcessOsdUpdateType input;

  _VdrPluginWeb_ProcessOsdUpdate_args__isset __isset;

  void __set_input(const ProcessOsdUpdateType& val);

  bool operator == (const VdrPluginWeb_ProcessOsdUpdate_args & rhs) const;
  bool operator != (const VdrPluginWeb_ProcessOsdUpdate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VdrPluginWeb_ProcessOsdUpdate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VdrPluginWeb_ProcessOsdUpdate_pargs {
 public:


  virtual ~VdrPluginWeb_ProcessOsdUpdate_pargs() noexcept;
  const ProcessOsdUpdateType* input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VdrPluginWeb_ProcessOsdUpdate_result__isset {
  _VdrPluginWeb_ProcessOsdUpdate_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _VdrPluginWeb_ProcessOsdUpdate_result__isset;

class VdrPluginWeb_ProcessOsdUpdate_result {
 public:

  VdrPluginWeb_ProcessOsdUpdate_result(const VdrPluginWeb_ProcessOsdUpdate_result&);
  VdrPluginWeb_ProcessOsdUpdate_result& operator=(const VdrPluginWeb_ProcessOsdUpdate_result&);
  VdrPluginWeb_ProcessOsdUpdate_result() noexcept;

  virtual ~VdrPluginWeb_ProcessOsdUpdate_result() noexcept;
  bool success;
   ::common::OperationFailed err;

  _VdrPluginWeb_ProcessOsdUpdate_result__isset __isset;

  void __set_success(const bool val);

  void __set_err(const  ::common::OperationFailed& val);

  bool operator == (const VdrPluginWeb_ProcessOsdUpdate_result & rhs) const;
  bool operator != (const VdrPluginWeb_ProcessOsdUpdate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VdrPluginWeb_ProcessOsdUpdate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VdrPluginWeb_ProcessOsdUpdate_presult__isset {
  _VdrPluginWeb_ProcessOsdUpdate_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _VdrPluginWeb_ProcessOsdUpdate_presult__isset;

class VdrPluginWeb_ProcessOsdUpdate_presult {
 public:


  virtual ~VdrPluginWeb_ProcessOsdUpdate_presult() noexcept;
  bool* success;
   ::common::OperationFailed err;

  _VdrPluginWeb_ProcessOsdUpdate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _VdrPluginWeb_ProcessOsdUpdateQOI_args__isset {
  _VdrPluginWeb_ProcessOsdUpdateQOI_args__isset() : input(false) {}
  bool input :1;
} _VdrPluginWeb_ProcessOsdUpdateQOI_args__isset;

class VdrPluginWeb_ProcessOsdUpdateQOI_args {
 public:

  VdrPluginWeb_ProcessOsdUpdateQOI_args(const VdrPluginWeb_ProcessOsdUpdateQOI_args&);
  VdrPluginWeb_ProcessOsdUpdateQOI_args& operator=(const VdrPluginWeb_ProcessOsdUpdateQOI_args&);
  VdrPluginWeb_ProcessOsdUpdateQOI_args() noexcept;

  virtual ~VdrPluginWeb_ProcessOsdUpdateQOI_args() noexcept;
  ProcessOsdUpdateQOIType input;

  _VdrPluginWeb_ProcessOsdUpdateQOI_args__isset __isset;

  void __set_input(const ProcessOsdUpdateQOIType& val);

  bool operator == (const VdrPluginWeb_ProcessOsdUpdateQOI_args & rhs) const;
  bool operator != (const VdrPluginWeb_ProcessOsdUpdateQOI_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VdrPluginWeb_ProcessOsdUpdateQOI_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VdrPluginWeb_ProcessOsdUpdateQOI_pargs {
 public:


  virtual ~VdrPluginWeb_ProcessOsdUpdateQOI_pargs() noexcept;
  const ProcessOsdUpdateQOIType* input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VdrPluginWeb_ProcessOsdUpdateQOI_result__isset {
  _VdrPluginWeb_ProcessOsdUpdateQOI_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _VdrPluginWeb_ProcessOsdUpdateQOI_result__isset;

class VdrPluginWeb_ProcessOsdUpdateQOI_result {
 public:

  VdrPluginWeb_ProcessOsdUpdateQOI_result(const VdrPluginWeb_ProcessOsdUpdateQOI_result&);
  VdrPluginWeb_ProcessOsdUpdateQOI_result& operator=(const VdrPluginWeb_ProcessOsdUpdateQOI_result&);
  VdrPluginWeb_ProcessOsdUpdateQOI_result() noexcept;

  virtual ~VdrPluginWeb_ProcessOsdUpdateQOI_result() noexcept;
  bool success;
   ::common::OperationFailed err;

  _VdrPluginWeb_ProcessOsdUpdateQOI_result__isset __isset;

  void __set_success(const bool val);

  void __set_err(const  ::common::OperationFailed& val);

  bool operator == (const VdrPluginWeb_ProcessOsdUpdateQOI_result & rhs) const;
  bool operator != (const VdrPluginWeb_ProcessOsdUpdateQOI_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VdrPluginWeb_ProcessOsdUpdateQOI_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VdrPluginWeb_ProcessOsdUpdateQOI_presult__isset {
  _VdrPluginWeb_ProcessOsdUpdateQOI_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _VdrPluginWeb_ProcessOsdUpdateQOI_presult__isset;

class VdrPluginWeb_ProcessOsdUpdateQOI_presult {
 public:


  virtual ~VdrPluginWeb_ProcessOsdUpdateQOI_presult() noexcept;
  bool* success;
   ::common::OperationFailed err;

  _VdrPluginWeb_ProcessOsdUpdateQOI_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _VdrPluginWeb_ProcessTSPacket_args__isset {
  _VdrPluginWeb_ProcessTSPacket_args__isset() : input(false) {}
  bool input :1;
} _VdrPluginWeb_ProcessTSPacket_args__isset;

class VdrPluginWeb_ProcessTSPacket_args {
 public:

  VdrPluginWeb_ProcessTSPacket_args(const VdrPluginWeb_ProcessTSPacket_args&);
  VdrPluginWeb_ProcessTSPacket_args& operator=(const VdrPluginWeb_ProcessTSPacket_args&);
  VdrPluginWeb_ProcessTSPacket_args() noexcept;

  virtual ~VdrPluginWeb_ProcessTSPacket_args() noexcept;
  ProcessTSPacketType input;

  _VdrPluginWeb_ProcessTSPacket_args__isset __isset;

  void __set_input(const ProcessTSPacketType& val);

  bool operator == (const VdrPluginWeb_ProcessTSPacket_args & rhs) const;
  bool operator != (const VdrPluginWeb_ProcessTSPacket_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VdrPluginWeb_ProcessTSPacket_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VdrPluginWeb_ProcessTSPacket_pargs {
 public:


  virtual ~VdrPluginWeb_ProcessTSPacket_pargs() noexcept;
  const ProcessTSPacketType* input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VdrPluginWeb_ProcessTSPacket_result__isset {
  _VdrPluginWeb_ProcessTSPacket_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _VdrPluginWeb_ProcessTSPacket_result__isset;

class VdrPluginWeb_ProcessTSPacket_result {
 public:

  VdrPluginWeb_ProcessTSPacket_result(const VdrPluginWeb_ProcessTSPacket_result&);
  VdrPluginWeb_ProcessTSPacket_result& operator=(const VdrPluginWeb_ProcessTSPacket_result&);
  VdrPluginWeb_ProcessTSPacket_result() noexcept;

  virtual ~VdrPluginWeb_ProcessTSPacket_result() noexcept;
  bool success;
   ::common::OperationFailed err;

  _VdrPluginWeb_ProcessTSPacket_result__isset __isset;

  void __set_success(const bool val);

  void __set_err(const  ::common::OperationFailed& val);

  bool operator == (const VdrPluginWeb_ProcessTSPacket_result & rhs) const;
  bool operator != (const VdrPluginWeb_ProcessTSPacket_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VdrPluginWeb_ProcessTSPacket_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VdrPluginWeb_ProcessTSPacket_presult__isset {
  _VdrPluginWeb_ProcessTSPacket_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _VdrPluginWeb_ProcessTSPacket_presult__isset;

class VdrPluginWeb_ProcessTSPacket_presult {
 public:


  virtual ~VdrPluginWeb_ProcessTSPacket_presult() noexcept;
  bool* success;
   ::common::OperationFailed err;

  _VdrPluginWeb_ProcessTSPacket_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _VdrPluginWeb_StartVideo_args__isset {
  _VdrPluginWeb_StartVideo_args__isset() : input(false) {}
  bool input :1;
} _VdrPluginWeb_StartVideo_args__isset;

class VdrPluginWeb_StartVideo_args {
 public:

  VdrPluginWeb_StartVideo_args(const VdrPluginWeb_StartVideo_args&);
  VdrPluginWeb_StartVideo_args& operator=(const VdrPluginWeb_StartVideo_args&);
  VdrPluginWeb_StartVideo_args() noexcept;

  virtual ~VdrPluginWeb_StartVideo_args() noexcept;
  StartVideoType input;

  _VdrPluginWeb_StartVideo_args__isset __isset;

  void __set_input(const StartVideoType& val);

  bool operator == (const VdrPluginWeb_StartVideo_args & rhs) const;
  bool operator != (const VdrPluginWeb_StartVideo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VdrPluginWeb_StartVideo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VdrPluginWeb_StartVideo_pargs {
 public:


  virtual ~VdrPluginWeb_StartVideo_pargs() noexcept;
  const StartVideoType* input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VdrPluginWeb_StartVideo_result__isset {
  _VdrPluginWeb_StartVideo_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _VdrPluginWeb_StartVideo_result__isset;

class VdrPluginWeb_StartVideo_result {
 public:

  VdrPluginWeb_StartVideo_result(const VdrPluginWeb_StartVideo_result&);
  VdrPluginWeb_StartVideo_result& operator=(const VdrPluginWeb_StartVideo_result&);
  VdrPluginWeb_StartVideo_result() noexcept;

  virtual ~VdrPluginWeb_StartVideo_result() noexcept;
  bool success;
   ::common::OperationFailed err;

  _VdrPluginWeb_StartVideo_result__isset __isset;

  void __set_success(const bool val);

  void __set_err(const  ::common::OperationFailed& val);

  bool operator == (const VdrPluginWeb_StartVideo_result & rhs) const;
  bool operator != (const VdrPluginWeb_StartVideo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VdrPluginWeb_StartVideo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VdrPluginWeb_StartVideo_presult__isset {
  _VdrPluginWeb_StartVideo_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _VdrPluginWeb_StartVideo_presult__isset;

class VdrPluginWeb_StartVideo_presult {
 public:


  virtual ~VdrPluginWeb_StartVideo_presult() noexcept;
  bool* success;
   ::common::OperationFailed err;

  _VdrPluginWeb_StartVideo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class VdrPluginWeb_StopVideo_args {
 public:

  VdrPluginWeb_StopVideo_args(const VdrPluginWeb_StopVideo_args&) noexcept;
  VdrPluginWeb_StopVideo_args& operator=(const VdrPluginWeb_StopVideo_args&) noexcept;
  VdrPluginWeb_StopVideo_args() noexcept;

  virtual ~VdrPluginWeb_StopVideo_args() noexcept;

  bool operator == (const VdrPluginWeb_StopVideo_args & /* rhs */) const;
  bool operator != (const VdrPluginWeb_StopVideo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VdrPluginWeb_StopVideo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VdrPluginWeb_StopVideo_pargs {
 public:


  virtual ~VdrPluginWeb_StopVideo_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VdrPluginWeb_StopVideo_result__isset {
  _VdrPluginWeb_StopVideo_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _VdrPluginWeb_StopVideo_result__isset;

class VdrPluginWeb_StopVideo_result {
 public:

  VdrPluginWeb_StopVideo_result(const VdrPluginWeb_StopVideo_result&);
  VdrPluginWeb_StopVideo_result& operator=(const VdrPluginWeb_StopVideo_result&);
  VdrPluginWeb_StopVideo_result() noexcept;

  virtual ~VdrPluginWeb_StopVideo_result() noexcept;
  bool success;
   ::common::OperationFailed err;

  _VdrPluginWeb_StopVideo_result__isset __isset;

  void __set_success(const bool val);

  void __set_err(const  ::common::OperationFailed& val);

  bool operator == (const VdrPluginWeb_StopVideo_result & rhs) const;
  bool operator != (const VdrPluginWeb_StopVideo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VdrPluginWeb_StopVideo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VdrPluginWeb_StopVideo_presult__isset {
  _VdrPluginWeb_StopVideo_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _VdrPluginWeb_StopVideo_presult__isset;

class VdrPluginWeb_StopVideo_presult {
 public:


  virtual ~VdrPluginWeb_StopVideo_presult() noexcept;
  bool* success;
   ::common::OperationFailed err;

  _VdrPluginWeb_StopVideo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class VdrPluginWeb_PauseVideo_args {
 public:

  VdrPluginWeb_PauseVideo_args(const VdrPluginWeb_PauseVideo_args&) noexcept;
  VdrPluginWeb_PauseVideo_args& operator=(const VdrPluginWeb_PauseVideo_args&) noexcept;
  VdrPluginWeb_PauseVideo_args() noexcept;

  virtual ~VdrPluginWeb_PauseVideo_args() noexcept;

  bool operator == (const VdrPluginWeb_PauseVideo_args & /* rhs */) const;
  bool operator != (const VdrPluginWeb_PauseVideo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VdrPluginWeb_PauseVideo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VdrPluginWeb_PauseVideo_pargs {
 public:


  virtual ~VdrPluginWeb_PauseVideo_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VdrPluginWeb_PauseVideo_result__isset {
  _VdrPluginWeb_PauseVideo_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _VdrPluginWeb_PauseVideo_result__isset;

class VdrPluginWeb_PauseVideo_result {
 public:

  VdrPluginWeb_PauseVideo_result(const VdrPluginWeb_PauseVideo_result&);
  VdrPluginWeb_PauseVideo_result& operator=(const VdrPluginWeb_PauseVideo_result&);
  VdrPluginWeb_PauseVideo_result() noexcept;

  virtual ~VdrPluginWeb_PauseVideo_result() noexcept;
  bool success;
   ::common::OperationFailed err;

  _VdrPluginWeb_PauseVideo_result__isset __isset;

  void __set_success(const bool val);

  void __set_err(const  ::common::OperationFailed& val);

  bool operator == (const VdrPluginWeb_PauseVideo_result & rhs) const;
  bool operator != (const VdrPluginWeb_PauseVideo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VdrPluginWeb_PauseVideo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VdrPluginWeb_PauseVideo_presult__isset {
  _VdrPluginWeb_PauseVideo_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _VdrPluginWeb_PauseVideo_presult__isset;

class VdrPluginWeb_PauseVideo_presult {
 public:


  virtual ~VdrPluginWeb_PauseVideo_presult() noexcept;
  bool* success;
   ::common::OperationFailed err;

  _VdrPluginWeb_PauseVideo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class VdrPluginWeb_ResumeVideo_args {
 public:

  VdrPluginWeb_ResumeVideo_args(const VdrPluginWeb_ResumeVideo_args&) noexcept;
  VdrPluginWeb_ResumeVideo_args& operator=(const VdrPluginWeb_ResumeVideo_args&) noexcept;
  VdrPluginWeb_ResumeVideo_args() noexcept;

  virtual ~VdrPluginWeb_ResumeVideo_args() noexcept;

  bool operator == (const VdrPluginWeb_ResumeVideo_args & /* rhs */) const;
  bool operator != (const VdrPluginWeb_ResumeVideo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VdrPluginWeb_ResumeVideo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VdrPluginWeb_ResumeVideo_pargs {
 public:


  virtual ~VdrPluginWeb_ResumeVideo_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VdrPluginWeb_ResumeVideo_result__isset {
  _VdrPluginWeb_ResumeVideo_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _VdrPluginWeb_ResumeVideo_result__isset;

class VdrPluginWeb_ResumeVideo_result {
 public:

  VdrPluginWeb_ResumeVideo_result(const VdrPluginWeb_ResumeVideo_result&);
  VdrPluginWeb_ResumeVideo_result& operator=(const VdrPluginWeb_ResumeVideo_result&);
  VdrPluginWeb_ResumeVideo_result() noexcept;

  virtual ~VdrPluginWeb_ResumeVideo_result() noexcept;
  bool success;
   ::common::OperationFailed err;

  _VdrPluginWeb_ResumeVideo_result__isset __isset;

  void __set_success(const bool val);

  void __set_err(const  ::common::OperationFailed& val);

  bool operator == (const VdrPluginWeb_ResumeVideo_result & rhs) const;
  bool operator != (const VdrPluginWeb_ResumeVideo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VdrPluginWeb_ResumeVideo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VdrPluginWeb_ResumeVideo_presult__isset {
  _VdrPluginWeb_ResumeVideo_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _VdrPluginWeb_ResumeVideo_presult__isset;

class VdrPluginWeb_ResumeVideo_presult {
 public:


  virtual ~VdrPluginWeb_ResumeVideo_presult() noexcept;
  bool* success;
   ::common::OperationFailed err;

  _VdrPluginWeb_ResumeVideo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class VdrPluginWeb_Seeked_args {
 public:

  VdrPluginWeb_Seeked_args(const VdrPluginWeb_Seeked_args&) noexcept;
  VdrPluginWeb_Seeked_args& operator=(const VdrPluginWeb_Seeked_args&) noexcept;
  VdrPluginWeb_Seeked_args() noexcept;

  virtual ~VdrPluginWeb_Seeked_args() noexcept;

  bool operator == (const VdrPluginWeb_Seeked_args & /* rhs */) const;
  bool operator != (const VdrPluginWeb_Seeked_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VdrPluginWeb_Seeked_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VdrPluginWeb_Seeked_pargs {
 public:


  virtual ~VdrPluginWeb_Seeked_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VdrPluginWeb_Seeked_result__isset {
  _VdrPluginWeb_Seeked_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _VdrPluginWeb_Seeked_result__isset;

class VdrPluginWeb_Seeked_result {
 public:

  VdrPluginWeb_Seeked_result(const VdrPluginWeb_Seeked_result&);
  VdrPluginWeb_Seeked_result& operator=(const VdrPluginWeb_Seeked_result&);
  VdrPluginWeb_Seeked_result() noexcept;

  virtual ~VdrPluginWeb_Seeked_result() noexcept;
  bool success;
   ::common::OperationFailed err;

  _VdrPluginWeb_Seeked_result__isset __isset;

  void __set_success(const bool val);

  void __set_err(const  ::common::OperationFailed& val);

  bool operator == (const VdrPluginWeb_Seeked_result & rhs) const;
  bool operator != (const VdrPluginWeb_Seeked_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VdrPluginWeb_Seeked_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VdrPluginWeb_Seeked_presult__isset {
  _VdrPluginWeb_Seeked_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _VdrPluginWeb_Seeked_presult__isset;

class VdrPluginWeb_Seeked_presult {
 public:


  virtual ~VdrPluginWeb_Seeked_presult() noexcept;
  bool* success;
   ::common::OperationFailed err;

  _VdrPluginWeb_Seeked_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _VdrPluginWeb_VideoSize_args__isset {
  _VdrPluginWeb_VideoSize_args__isset() : input(false) {}
  bool input :1;
} _VdrPluginWeb_VideoSize_args__isset;

class VdrPluginWeb_VideoSize_args {
 public:

  VdrPluginWeb_VideoSize_args(const VdrPluginWeb_VideoSize_args&) noexcept;
  VdrPluginWeb_VideoSize_args& operator=(const VdrPluginWeb_VideoSize_args&) noexcept;
  VdrPluginWeb_VideoSize_args() noexcept;

  virtual ~VdrPluginWeb_VideoSize_args() noexcept;
  VideoSizeType input;

  _VdrPluginWeb_VideoSize_args__isset __isset;

  void __set_input(const VideoSizeType& val);

  bool operator == (const VdrPluginWeb_VideoSize_args & rhs) const;
  bool operator != (const VdrPluginWeb_VideoSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VdrPluginWeb_VideoSize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VdrPluginWeb_VideoSize_pargs {
 public:


  virtual ~VdrPluginWeb_VideoSize_pargs() noexcept;
  const VideoSizeType* input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VdrPluginWeb_VideoSize_result__isset {
  _VdrPluginWeb_VideoSize_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _VdrPluginWeb_VideoSize_result__isset;

class VdrPluginWeb_VideoSize_result {
 public:

  VdrPluginWeb_VideoSize_result(const VdrPluginWeb_VideoSize_result&);
  VdrPluginWeb_VideoSize_result& operator=(const VdrPluginWeb_VideoSize_result&);
  VdrPluginWeb_VideoSize_result() noexcept;

  virtual ~VdrPluginWeb_VideoSize_result() noexcept;
  bool success;
   ::common::OperationFailed err;

  _VdrPluginWeb_VideoSize_result__isset __isset;

  void __set_success(const bool val);

  void __set_err(const  ::common::OperationFailed& val);

  bool operator == (const VdrPluginWeb_VideoSize_result & rhs) const;
  bool operator != (const VdrPluginWeb_VideoSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VdrPluginWeb_VideoSize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VdrPluginWeb_VideoSize_presult__isset {
  _VdrPluginWeb_VideoSize_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _VdrPluginWeb_VideoSize_presult__isset;

class VdrPluginWeb_VideoSize_presult {
 public:


  virtual ~VdrPluginWeb_VideoSize_presult() noexcept;
  bool* success;
   ::common::OperationFailed err;

  _VdrPluginWeb_VideoSize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class VdrPluginWeb_VideoFullscreen_args {
 public:

  VdrPluginWeb_VideoFullscreen_args(const VdrPluginWeb_VideoFullscreen_args&) noexcept;
  VdrPluginWeb_VideoFullscreen_args& operator=(const VdrPluginWeb_VideoFullscreen_args&) noexcept;
  VdrPluginWeb_VideoFullscreen_args() noexcept;

  virtual ~VdrPluginWeb_VideoFullscreen_args() noexcept;

  bool operator == (const VdrPluginWeb_VideoFullscreen_args & /* rhs */) const;
  bool operator != (const VdrPluginWeb_VideoFullscreen_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VdrPluginWeb_VideoFullscreen_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VdrPluginWeb_VideoFullscreen_pargs {
 public:


  virtual ~VdrPluginWeb_VideoFullscreen_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VdrPluginWeb_VideoFullscreen_result__isset {
  _VdrPluginWeb_VideoFullscreen_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _VdrPluginWeb_VideoFullscreen_result__isset;

class VdrPluginWeb_VideoFullscreen_result {
 public:

  VdrPluginWeb_VideoFullscreen_result(const VdrPluginWeb_VideoFullscreen_result&);
  VdrPluginWeb_VideoFullscreen_result& operator=(const VdrPluginWeb_VideoFullscreen_result&);
  VdrPluginWeb_VideoFullscreen_result() noexcept;

  virtual ~VdrPluginWeb_VideoFullscreen_result() noexcept;
  bool success;
   ::common::OperationFailed err;

  _VdrPluginWeb_VideoFullscreen_result__isset __isset;

  void __set_success(const bool val);

  void __set_err(const  ::common::OperationFailed& val);

  bool operator == (const VdrPluginWeb_VideoFullscreen_result & rhs) const;
  bool operator != (const VdrPluginWeb_VideoFullscreen_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VdrPluginWeb_VideoFullscreen_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VdrPluginWeb_VideoFullscreen_presult__isset {
  _VdrPluginWeb_VideoFullscreen_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _VdrPluginWeb_VideoFullscreen_presult__isset;

class VdrPluginWeb_VideoFullscreen_presult {
 public:


  virtual ~VdrPluginWeb_VideoFullscreen_presult() noexcept;
  bool* success;
   ::common::OperationFailed err;

  _VdrPluginWeb_VideoFullscreen_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _VdrPluginWeb_ResetVideo_args__isset {
  _VdrPluginWeb_ResetVideo_args__isset() : input(false) {}
  bool input :1;
} _VdrPluginWeb_ResetVideo_args__isset;

class VdrPluginWeb_ResetVideo_args {
 public:

  VdrPluginWeb_ResetVideo_args(const VdrPluginWeb_ResetVideo_args&);
  VdrPluginWeb_ResetVideo_args& operator=(const VdrPluginWeb_ResetVideo_args&);
  VdrPluginWeb_ResetVideo_args() noexcept;

  virtual ~VdrPluginWeb_ResetVideo_args() noexcept;
  ResetVideoType input;

  _VdrPluginWeb_ResetVideo_args__isset __isset;

  void __set_input(const ResetVideoType& val);

  bool operator == (const VdrPluginWeb_ResetVideo_args & rhs) const;
  bool operator != (const VdrPluginWeb_ResetVideo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VdrPluginWeb_ResetVideo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VdrPluginWeb_ResetVideo_pargs {
 public:


  virtual ~VdrPluginWeb_ResetVideo_pargs() noexcept;
  const ResetVideoType* input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VdrPluginWeb_ResetVideo_result__isset {
  _VdrPluginWeb_ResetVideo_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _VdrPluginWeb_ResetVideo_result__isset;

class VdrPluginWeb_ResetVideo_result {
 public:

  VdrPluginWeb_ResetVideo_result(const VdrPluginWeb_ResetVideo_result&);
  VdrPluginWeb_ResetVideo_result& operator=(const VdrPluginWeb_ResetVideo_result&);
  VdrPluginWeb_ResetVideo_result() noexcept;

  virtual ~VdrPluginWeb_ResetVideo_result() noexcept;
  bool success;
   ::common::OperationFailed err;

  _VdrPluginWeb_ResetVideo_result__isset __isset;

  void __set_success(const bool val);

  void __set_err(const  ::common::OperationFailed& val);

  bool operator == (const VdrPluginWeb_ResetVideo_result & rhs) const;
  bool operator != (const VdrPluginWeb_ResetVideo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VdrPluginWeb_ResetVideo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VdrPluginWeb_ResetVideo_presult__isset {
  _VdrPluginWeb_ResetVideo_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _VdrPluginWeb_ResetVideo_presult__isset;

class VdrPluginWeb_ResetVideo_presult {
 public:


  virtual ~VdrPluginWeb_ResetVideo_presult() noexcept;
  bool* success;
   ::common::OperationFailed err;

  _VdrPluginWeb_ResetVideo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _VdrPluginWeb_SelectAudioTrack_args__isset {
  _VdrPluginWeb_SelectAudioTrack_args__isset() : input(false) {}
  bool input :1;
} _VdrPluginWeb_SelectAudioTrack_args__isset;

class VdrPluginWeb_SelectAudioTrack_args {
 public:

  VdrPluginWeb_SelectAudioTrack_args(const VdrPluginWeb_SelectAudioTrack_args&);
  VdrPluginWeb_SelectAudioTrack_args& operator=(const VdrPluginWeb_SelectAudioTrack_args&);
  VdrPluginWeb_SelectAudioTrack_args() noexcept;

  virtual ~VdrPluginWeb_SelectAudioTrack_args() noexcept;
  SelectAudioTrackType input;

  _VdrPluginWeb_SelectAudioTrack_args__isset __isset;

  void __set_input(const SelectAudioTrackType& val);

  bool operator == (const VdrPluginWeb_SelectAudioTrack_args & rhs) const;
  bool operator != (const VdrPluginWeb_SelectAudioTrack_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VdrPluginWeb_SelectAudioTrack_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VdrPluginWeb_SelectAudioTrack_pargs {
 public:


  virtual ~VdrPluginWeb_SelectAudioTrack_pargs() noexcept;
  const SelectAudioTrackType* input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VdrPluginWeb_SelectAudioTrack_result__isset {
  _VdrPluginWeb_SelectAudioTrack_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _VdrPluginWeb_SelectAudioTrack_result__isset;

class VdrPluginWeb_SelectAudioTrack_result {
 public:

  VdrPluginWeb_SelectAudioTrack_result(const VdrPluginWeb_SelectAudioTrack_result&);
  VdrPluginWeb_SelectAudioTrack_result& operator=(const VdrPluginWeb_SelectAudioTrack_result&);
  VdrPluginWeb_SelectAudioTrack_result() noexcept;

  virtual ~VdrPluginWeb_SelectAudioTrack_result() noexcept;
  bool success;
   ::common::OperationFailed err;

  _VdrPluginWeb_SelectAudioTrack_result__isset __isset;

  void __set_success(const bool val);

  void __set_err(const  ::common::OperationFailed& val);

  bool operator == (const VdrPluginWeb_SelectAudioTrack_result & rhs) const;
  bool operator != (const VdrPluginWeb_SelectAudioTrack_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VdrPluginWeb_SelectAudioTrack_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VdrPluginWeb_SelectAudioTrack_presult__isset {
  _VdrPluginWeb_SelectAudioTrack_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _VdrPluginWeb_SelectAudioTrack_presult__isset;

class VdrPluginWeb_SelectAudioTrack_presult {
 public:


  virtual ~VdrPluginWeb_SelectAudioTrack_presult() noexcept;
  bool* success;
   ::common::OperationFailed err;

  _VdrPluginWeb_SelectAudioTrack_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class VdrPluginWebClient : virtual public VdrPluginWebIf, public  ::common::CommonServiceClient {
 public:
  VdrPluginWebClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::common::CommonServiceClient(prot, prot) {}
  VdrPluginWebClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::common::CommonServiceClient(iprot, oprot) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool ProcessOsdUpdate(const ProcessOsdUpdateType& input) override;
  void send_ProcessOsdUpdate(const ProcessOsdUpdateType& input);
  bool recv_ProcessOsdUpdate();
  bool ProcessOsdUpdateQOI(const ProcessOsdUpdateQOIType& input) override;
  void send_ProcessOsdUpdateQOI(const ProcessOsdUpdateQOIType& input);
  bool recv_ProcessOsdUpdateQOI();
  bool ProcessTSPacket(const ProcessTSPacketType& input) override;
  void send_ProcessTSPacket(const ProcessTSPacketType& input);
  bool recv_ProcessTSPacket();
  bool StartVideo(const StartVideoType& input) override;
  void send_StartVideo(const StartVideoType& input);
  bool recv_StartVideo();
  bool StopVideo() override;
  void send_StopVideo();
  bool recv_StopVideo();
  bool PauseVideo() override;
  void send_PauseVideo();
  bool recv_PauseVideo();
  bool ResumeVideo() override;
  void send_ResumeVideo();
  bool recv_ResumeVideo();
  bool Seeked() override;
  void send_Seeked();
  bool recv_Seeked();
  bool VideoSize(const VideoSizeType& input) override;
  void send_VideoSize(const VideoSizeType& input);
  bool recv_VideoSize();
  bool VideoFullscreen() override;
  void send_VideoFullscreen();
  bool recv_VideoFullscreen();
  bool ResetVideo(const ResetVideoType& input) override;
  void send_ResetVideo(const ResetVideoType& input);
  bool recv_ResetVideo();
  bool SelectAudioTrack(const SelectAudioTrackType& input) override;
  void send_SelectAudioTrack(const SelectAudioTrackType& input);
  bool recv_SelectAudioTrack();
};

class VdrPluginWebProcessor : public  ::common::CommonServiceProcessor {
 protected:
  ::std::shared_ptr<VdrPluginWebIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (VdrPluginWebProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ProcessOsdUpdate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ProcessOsdUpdateQOI(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ProcessTSPacket(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_StartVideo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_StopVideo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PauseVideo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ResumeVideo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Seeked(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_VideoSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_VideoFullscreen(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ResetVideo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SelectAudioTrack(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  VdrPluginWebProcessor(::std::shared_ptr<VdrPluginWebIf> iface) :
     ::common::CommonServiceProcessor(iface),
    iface_(iface) {
    processMap_["ProcessOsdUpdate"] = &VdrPluginWebProcessor::process_ProcessOsdUpdate;
    processMap_["ProcessOsdUpdateQOI"] = &VdrPluginWebProcessor::process_ProcessOsdUpdateQOI;
    processMap_["ProcessTSPacket"] = &VdrPluginWebProcessor::process_ProcessTSPacket;
    processMap_["StartVideo"] = &VdrPluginWebProcessor::process_StartVideo;
    processMap_["StopVideo"] = &VdrPluginWebProcessor::process_StopVideo;
    processMap_["PauseVideo"] = &VdrPluginWebProcessor::process_PauseVideo;
    processMap_["ResumeVideo"] = &VdrPluginWebProcessor::process_ResumeVideo;
    processMap_["Seeked"] = &VdrPluginWebProcessor::process_Seeked;
    processMap_["VideoSize"] = &VdrPluginWebProcessor::process_VideoSize;
    processMap_["VideoFullscreen"] = &VdrPluginWebProcessor::process_VideoFullscreen;
    processMap_["ResetVideo"] = &VdrPluginWebProcessor::process_ResetVideo;
    processMap_["SelectAudioTrack"] = &VdrPluginWebProcessor::process_SelectAudioTrack;
  }

  virtual ~VdrPluginWebProcessor() {}
};

class VdrPluginWebProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  VdrPluginWebProcessorFactory(const ::std::shared_ptr< VdrPluginWebIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< VdrPluginWebIfFactory > handlerFactory_;
};

class VdrPluginWebMultiface : virtual public VdrPluginWebIf, public  ::common::CommonServiceMultiface {
 public:
  VdrPluginWebMultiface(std::vector<std::shared_ptr<VdrPluginWebIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<std::shared_ptr<VdrPluginWebIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::common::CommonServiceMultiface::add(*iter);
    }
  }
  virtual ~VdrPluginWebMultiface() {}
 protected:
  std::vector<std::shared_ptr<VdrPluginWebIf> > ifaces_;
  VdrPluginWebMultiface() {}
  void add(::std::shared_ptr<VdrPluginWebIf> iface) {
     ::common::CommonServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  bool ProcessOsdUpdate(const ProcessOsdUpdateType& input) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ProcessOsdUpdate(input);
    }
    return ifaces_[i]->ProcessOsdUpdate(input);
  }

  bool ProcessOsdUpdateQOI(const ProcessOsdUpdateQOIType& input) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ProcessOsdUpdateQOI(input);
    }
    return ifaces_[i]->ProcessOsdUpdateQOI(input);
  }

  bool ProcessTSPacket(const ProcessTSPacketType& input) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ProcessTSPacket(input);
    }
    return ifaces_[i]->ProcessTSPacket(input);
  }

  bool StartVideo(const StartVideoType& input) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->StartVideo(input);
    }
    return ifaces_[i]->StartVideo(input);
  }

  bool StopVideo() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->StopVideo();
    }
    return ifaces_[i]->StopVideo();
  }

  bool PauseVideo() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PauseVideo();
    }
    return ifaces_[i]->PauseVideo();
  }

  bool ResumeVideo() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ResumeVideo();
    }
    return ifaces_[i]->ResumeVideo();
  }

  bool Seeked() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Seeked();
    }
    return ifaces_[i]->Seeked();
  }

  bool VideoSize(const VideoSizeType& input) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->VideoSize(input);
    }
    return ifaces_[i]->VideoSize(input);
  }

  bool VideoFullscreen() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->VideoFullscreen();
    }
    return ifaces_[i]->VideoFullscreen();
  }

  bool ResetVideo(const ResetVideoType& input) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ResetVideo(input);
    }
    return ifaces_[i]->ResetVideo(input);
  }

  bool SelectAudioTrack(const SelectAudioTrackType& input) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SelectAudioTrack(input);
    }
    return ifaces_[i]->SelectAudioTrack(input);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class VdrPluginWebConcurrentClient : virtual public VdrPluginWebIf, public  ::common::CommonServiceConcurrentClient {
 public:
  VdrPluginWebConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) :
     ::common::CommonServiceConcurrentClient(prot, prot, sync) {}
  VdrPluginWebConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) :     ::common::CommonServiceConcurrentClient(iprot, oprot, sync) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool ProcessOsdUpdate(const ProcessOsdUpdateType& input) override;
  int32_t send_ProcessOsdUpdate(const ProcessOsdUpdateType& input);
  bool recv_ProcessOsdUpdate(const int32_t seqid);
  bool ProcessOsdUpdateQOI(const ProcessOsdUpdateQOIType& input) override;
  int32_t send_ProcessOsdUpdateQOI(const ProcessOsdUpdateQOIType& input);
  bool recv_ProcessOsdUpdateQOI(const int32_t seqid);
  bool ProcessTSPacket(const ProcessTSPacketType& input) override;
  int32_t send_ProcessTSPacket(const ProcessTSPacketType& input);
  bool recv_ProcessTSPacket(const int32_t seqid);
  bool StartVideo(const StartVideoType& input) override;
  int32_t send_StartVideo(const StartVideoType& input);
  bool recv_StartVideo(const int32_t seqid);
  bool StopVideo() override;
  int32_t send_StopVideo();
  bool recv_StopVideo(const int32_t seqid);
  bool PauseVideo() override;
  int32_t send_PauseVideo();
  bool recv_PauseVideo(const int32_t seqid);
  bool ResumeVideo() override;
  int32_t send_ResumeVideo();
  bool recv_ResumeVideo(const int32_t seqid);
  bool Seeked() override;
  int32_t send_Seeked();
  bool recv_Seeked(const int32_t seqid);
  bool VideoSize(const VideoSizeType& input) override;
  int32_t send_VideoSize(const VideoSizeType& input);
  bool recv_VideoSize(const int32_t seqid);
  bool VideoFullscreen() override;
  int32_t send_VideoFullscreen();
  bool recv_VideoFullscreen(const int32_t seqid);
  bool ResetVideo(const ResetVideoType& input) override;
  int32_t send_ResetVideo(const ResetVideoType& input);
  bool recv_ResetVideo(const int32_t seqid);
  bool SelectAudioTrack(const SelectAudioTrackType& input) override;
  int32_t send_SelectAudioTrack(const SelectAudioTrackType& input);
  bool recv_SelectAudioTrack(const int32_t seqid);
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
