// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "RemoteTranscoder.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::remotetranscoder;

class RemoteTranscoderHandler : virtual public RemoteTranscoderIf {
 public:
  RemoteTranscoderHandler() {
    // Your initialization goes here
  }

  void Probe(std::string& _return, const ProbeType& input) {
    // Your implementation goes here
    printf("Probe\n");
  }

  bool StreamUrl(const StreamUrlType& input) {
    // Your implementation goes here
    printf("StreamUrl\n");
  }

  bool Pause(const PauseType& input) {
    // Your implementation goes here
    printf("Pause\n");
  }

  bool SeekTo(const SeekToType& input) {
    // Your implementation goes here
    printf("SeekTo\n");
  }

  bool Resume(const ResumeType& input) {
    // Your implementation goes here
    printf("Resume\n");
  }

  bool Stop(const StopType& input) {
    // Your implementation goes here
    printf("Stop\n");
  }

  void AudioInfo(std::string& _return, const AudioInfoType& input) {
    // Your implementation goes here
    printf("AudioInfo\n");
  }

  void GetVideo(std::string& _return, const VideoType& input) {
    // Your implementation goes here
    printf("GetVideo\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<RemoteTranscoderHandler> handler(new RemoteTranscoderHandler());
  ::std::shared_ptr<TProcessor> processor(new RemoteTranscoderProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

