/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef remotetranscoder_TYPES_H
#define remotetranscoder_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "common_types.h"


namespace remotetranscoder {

class ProbeType;

class StreamUrlType;

class PauseType;

class SeekToType;

class ResumeType;

class StopType;

class AudioInfoType;

class VideoType;

typedef struct _ProbeType__isset {
  _ProbeType__isset() : url(false), cookies(false), referer(false), userAgent(false), responseIp(false), responsePort(false), vdrIp(false), vdrPort(false), postfix(false) {}
  bool url :1;
  bool cookies :1;
  bool referer :1;
  bool userAgent :1;
  bool responseIp :1;
  bool responsePort :1;
  bool vdrIp :1;
  bool vdrPort :1;
  bool postfix :1;
} _ProbeType__isset;

class ProbeType : public virtual ::apache::thrift::TBase {
 public:

  ProbeType(const ProbeType&);
  ProbeType& operator=(const ProbeType&);
  ProbeType() noexcept;

  virtual ~ProbeType() noexcept;
  std::string url;
  std::string cookies;
  std::string referer;
  std::string userAgent;
  std::string responseIp;
  std::string responsePort;
  std::string vdrIp;
  std::string vdrPort;
  std::string postfix;

  _ProbeType__isset __isset;

  void __set_url(const std::string& val);

  void __set_cookies(const std::string& val);

  void __set_referer(const std::string& val);

  void __set_userAgent(const std::string& val);

  void __set_responseIp(const std::string& val);

  void __set_responsePort(const std::string& val);

  void __set_vdrIp(const std::string& val);

  void __set_vdrPort(const std::string& val);

  void __set_postfix(const std::string& val);

  bool operator == (const ProbeType & rhs) const;
  bool operator != (const ProbeType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProbeType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ProbeType &a, ProbeType &b);

std::ostream& operator<<(std::ostream& out, const ProbeType& obj);

typedef struct _StreamUrlType__isset {
  _StreamUrlType__isset() : url(false), cookies(false), referer(false), userAgent(false), responseIp(false), responsePort(false), vdrIp(false), vdrPort(false), mpdStart(false) {}
  bool url :1;
  bool cookies :1;
  bool referer :1;
  bool userAgent :1;
  bool responseIp :1;
  bool responsePort :1;
  bool vdrIp :1;
  bool vdrPort :1;
  bool mpdStart :1;
} _StreamUrlType__isset;

class StreamUrlType : public virtual ::apache::thrift::TBase {
 public:

  StreamUrlType(const StreamUrlType&);
  StreamUrlType& operator=(const StreamUrlType&);
  StreamUrlType() noexcept;

  virtual ~StreamUrlType() noexcept;
  std::string url;
  std::string cookies;
  std::string referer;
  std::string userAgent;
  std::string responseIp;
  std::string responsePort;
  std::string vdrIp;
  std::string vdrPort;
  std::string mpdStart;

  _StreamUrlType__isset __isset;

  void __set_url(const std::string& val);

  void __set_cookies(const std::string& val);

  void __set_referer(const std::string& val);

  void __set_userAgent(const std::string& val);

  void __set_responseIp(const std::string& val);

  void __set_responsePort(const std::string& val);

  void __set_vdrIp(const std::string& val);

  void __set_vdrPort(const std::string& val);

  void __set_mpdStart(const std::string& val);

  bool operator == (const StreamUrlType & rhs) const;
  bool operator != (const StreamUrlType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StreamUrlType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(StreamUrlType &a, StreamUrlType &b);

std::ostream& operator<<(std::ostream& out, const StreamUrlType& obj);

typedef struct _PauseType__isset {
  _PauseType__isset() : streamId(false) {}
  bool streamId :1;
} _PauseType__isset;

class PauseType : public virtual ::apache::thrift::TBase {
 public:

  PauseType(const PauseType&);
  PauseType& operator=(const PauseType&);
  PauseType() noexcept;

  virtual ~PauseType() noexcept;
  std::string streamId;

  _PauseType__isset __isset;

  void __set_streamId(const std::string& val);

  bool operator == (const PauseType & rhs) const;
  bool operator != (const PauseType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PauseType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(PauseType &a, PauseType &b);

std::ostream& operator<<(std::ostream& out, const PauseType& obj);

typedef struct _SeekToType__isset {
  _SeekToType__isset() : streamId(false), seekTo(false) {}
  bool streamId :1;
  bool seekTo :1;
} _SeekToType__isset;

class SeekToType : public virtual ::apache::thrift::TBase {
 public:

  SeekToType(const SeekToType&);
  SeekToType& operator=(const SeekToType&);
  SeekToType() noexcept;

  virtual ~SeekToType() noexcept;
  std::string streamId;
  std::string seekTo;

  _SeekToType__isset __isset;

  void __set_streamId(const std::string& val);

  void __set_seekTo(const std::string& val);

  bool operator == (const SeekToType & rhs) const;
  bool operator != (const SeekToType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekToType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(SeekToType &a, SeekToType &b);

std::ostream& operator<<(std::ostream& out, const SeekToType& obj);

typedef struct _ResumeType__isset {
  _ResumeType__isset() : streamId(false), position(false) {}
  bool streamId :1;
  bool position :1;
} _ResumeType__isset;

class ResumeType : public virtual ::apache::thrift::TBase {
 public:

  ResumeType(const ResumeType&);
  ResumeType& operator=(const ResumeType&);
  ResumeType() noexcept;

  virtual ~ResumeType() noexcept;
  std::string streamId;
  std::string position;

  _ResumeType__isset __isset;

  void __set_streamId(const std::string& val);

  void __set_position(const std::string& val);

  bool operator == (const ResumeType & rhs) const;
  bool operator != (const ResumeType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResumeType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ResumeType &a, ResumeType &b);

std::ostream& operator<<(std::ostream& out, const ResumeType& obj);

typedef struct _StopType__isset {
  _StopType__isset() : streamId(false), reason(false) {}
  bool streamId :1;
  bool reason :1;
} _StopType__isset;

class StopType : public virtual ::apache::thrift::TBase {
 public:

  StopType(const StopType&);
  StopType& operator=(const StopType&);
  StopType() noexcept;

  virtual ~StopType() noexcept;
  std::string streamId;
  std::string reason;

  _StopType__isset __isset;

  void __set_streamId(const std::string& val);

  void __set_reason(const std::string& val);

  bool operator == (const StopType & rhs) const;
  bool operator != (const StopType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StopType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(StopType &a, StopType &b);

std::ostream& operator<<(std::ostream& out, const StopType& obj);

typedef struct _AudioInfoType__isset {
  _AudioInfoType__isset() : streamId(false) {}
  bool streamId :1;
} _AudioInfoType__isset;

class AudioInfoType : public virtual ::apache::thrift::TBase {
 public:

  AudioInfoType(const AudioInfoType&);
  AudioInfoType& operator=(const AudioInfoType&);
  AudioInfoType() noexcept;

  virtual ~AudioInfoType() noexcept;
  std::string streamId;

  _AudioInfoType__isset __isset;

  void __set_streamId(const std::string& val);

  bool operator == (const AudioInfoType & rhs) const;
  bool operator != (const AudioInfoType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioInfoType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(AudioInfoType &a, AudioInfoType &b);

std::ostream& operator<<(std::ostream& out, const AudioInfoType& obj);

typedef struct _VideoType__isset {
  _VideoType__isset() : filename(false) {}
  bool filename :1;
} _VideoType__isset;

class VideoType : public virtual ::apache::thrift::TBase {
 public:

  VideoType(const VideoType&);
  VideoType& operator=(const VideoType&);
  VideoType() noexcept;

  virtual ~VideoType() noexcept;
  std::string filename;

  _VideoType__isset __isset;

  void __set_filename(const std::string& val);

  bool operator == (const VideoType & rhs) const;
  bool operator != (const VideoType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VideoType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(VideoType &a, VideoType &b);

std::ostream& operator<<(std::ostream& out, const VideoType& obj);

} // namespace

#endif
